
path-constant TOOLCHAIN : /home/wood/android/standalone/toolchain ;
path-constant BIN : /home/wood/android/standalone/toolchain/bin ;
path-constant SYSROOT : $(TOOLCHAIN)/sysroot ;

using gcc : arm : $(BIN)/arm-linux-androideabi-g++
    :
        <compileflags>--sysroot=$(SYSROOT)
        <compileflags>-mthumb
        # <compileflags>-Os
        <compileflags>-O2
        <compileflags>-g
        <threadapi>pthread
        #
        <compileflags>-DNDEBUG
        <compileflags>-D__GLIBC__
        <compileflags>-DBOOST_NO_INTRINSIC_WCHAR_T
        <compileflags>-DBOOST_FILESYSTEM_VERSION=2
        <compileflags>-fno-strict-aliasing
        <compileflags>-lstdc++
        # <compileflags>-I$(ANDROID_NDK)/sources/cxx-stl/gnu-libstdc++/include
        # <compileflags>-I$(ANDROID_NDK)/sources/cxx-stl/gnu-libstdc++/libs/armeabi/include
        #
        <archiver>$(BIN)/arm-linux-androideabi-ar
        <ranlib>$(BIN)/arm-linux-androideabi-ranlib
    ;

# ./bjam --build-type=complete --layout=tagged
#  variant=debug|release            Select the build variant
#  link=static|shared                    Whether to build static or shared libraries
#  threading=single|multi            Whether to build single or multithreaded binaries
#  runtime-link=static|shared      Whether to link to static or shared C and C++ runtime.

# http://www.cnblogs.com/ezhong/p/3326258.html
# http://www.cppblog.com/sunicdavy/archive/2013/07/20/201993.html

using gcc : arm : $(BIN)/arm-linux-androideabi-g++
    :
        <compileflags>--sysroot=$(SYSROOT)
        <compileflags>-mthumb
        # <compileflags>-Os
        <compileflags>-O2
        <compileflags>-g
        <threadapi>pthread
        #
        <compileflags>-DNDEBUG
        <compileflags>-D__GLIBC__
        <compileflags>-DBOOST_NO_INTRINSIC_WCHAR_T
        <compileflags>-DBOOST_FILESYSTEM_VERSION=2
        <compileflags>-fno-strict-aliasing
        <compileflags>-lstdc++
        # <compileflags>-I$(ANDROID_NDK)/sources/cxx-stl/gnu-libstdc++/include
        # <compileflags>-I$(ANDROID_NDK)/sources/cxx-stl/gnu-libstdc++/libs/armeabi/include
        #
        <archiver>$(BIN)/arm-linux-androideabi-ar
        <ranlib>$(BIN)/arm-linux-androideabi-ranlib
    ;
using gcc : androidR8e
:
arm-linux-androideabi-g++
:
<archiver>arm-linux-androideabi-ar
<compileflags>-fexceptions
<compileflags>-frtti
<compileflags>-fpic
<compileflags>-ffunction-sections
<compileflags>-funwind-tables
<compileflags>-D__ARM_ARCH_5__
<compileflags>-D__ARM_ARCH_5T__
<compileflags>-D__ARM_ARCH_5E__
<compileflags>-D__ARM_ARCH_5TE__
<compileflags>-Wno-psabi
<compileflags>-march=armv5te
<compileflags>-mtune=xscale
<compileflags>-msoft-float
<compileflags>-mthumb
<compileflags>-Os
<compileflags>-fomit-frame-pointer
<compileflags>-fno-strict-aliasing
<compileflags>-finline-limit=64
<compileflags>-I$(AndroidNDKRoot)/platforms/android-9/arch-arm/usr/include
<compileflags>-Wa,--noexecstack
<compileflags>-DANDROID
<compileflags>-D__ANDROID__
<compileflags>-DNDEBUG
<compileflags>-O2
<compileflags>-g
<compileflags>-I$(AndroidNDKRoot)/sources/cxx-stl/gnu-libstdc++/4.6/include
<compileflags>-I$(AndroidNDKRoot)/sources/cxx-stl/gnu-libstdc++/4.6/libs/armeabi/include
# @Moss - Above are the 'oficial' android flags
<architecture>arm
<compileflags>-fvisibility=hidden
<compileflags>-fvisibility-inlines-hidden
<compileflags>-fdata-sections
<cxxflags>-D__arm__
<cxxflags>-D_REENTRANT
<cxxflags>-D_GLIBCXX__PTHREADS
;

