description 'py3-httpd upstart'
author 'woody <jywww@qq.com>'

start on runlevel [23]
stop on shutdown

limit nofile 1024 1024

respawn
respawn limit 10 90

env HOME=/root

script
  cd $HOME/excel
  exec /usr/bin/env LANG=en_US.utf8 python3 $HOME/bin/SimpleHTTPServerWithUpload.py 2>&1 | logger -t py3-httpd
end script

### /etc/init/SimpleHTTPServerWithUpload.conf

### http://stackoverflow.com/questions/9330367/how-to-configure-jenkins-to-run-on-port-80
###
#description "jenkins: Jenkins Continuous Integration Server"
#author "James Page <james.page@ubuntu.com>"
#
#start on (local-filesystems and net-device-up IFACE!=lo)
#stop on runlevel [!2345]
#
#env USER="jenkins"
#env GROUP="jenkins"
#env JENKINS_LOG="/var/log/jenkins"
#env JENKINS_ROOT="/usr/share/jenkins"
#env JENKINS_HOME="/var/lib/jenkins"
#env JENKINS_RUN="/var/run/jenkins"
#env HTTP_PORT=80
#env AJP_PORT=-1
#env JAVA_OPTS=""
#env JAVA_HOME="/usr/lib/jvm/default-java"
#
#limit nofile 8192 8192
#
#pre-start script
#    test -f $JENKINS_ROOT/jenkins.war || { stop ; exit 0; }
#    $JENKINS_ROOT/bin/maintain-plugins.sh   
#    mkdir $JENKINS_RUN > /dev/null 2>&1  || true
#    chown -R $USER:$GROUP $JENKINS_RUN || true
#end script
#
#script
#    JENKINS_ARGS="--webroot=$JENKINS_RUN/war --httpPort=$HTTP_PORT --ajp13Port=$AJP_PORT"
#    exec daemon --name=jenkins --inherit --output=$JENKINS_LOG/jenkins.log --user=$USER \
#        -- $JAVA_HOME/bin/java $JAVA_OPTS -jar $JENKINS_ROOT/jenkins.war $JENKINS_ARGS \
#        --preferredClassLoader=java.net.URLClassLoader
#end script

###
### https://newcome.wordpress.com/2012/02/26/running-programs-as-linux-daemons-using-upstart/
#description "my service description"
#author "Me <myself@i.com>"
# 
## Stanzas
##
## Stanzas control when and how a process is started and stopped
## See a list of stanzas here: http://upstart.ubuntu.com/wiki/Stanzas#respawn
# 
## When to start the service
#start on runlevel [2345]
# 
## When to stop the service
#stop on runlevel [016]
# 
## Automatically restart process if crashed
#respawn
# 
## Essentially lets upstart know the process will detach itself to the background
#expect fork
# 
## Run before process
#pre-start script
#    [ -d /var/run/myservice ] || mkdir -p /var/run/myservice
#    echo "Put bash code here"
#end script
# 
## Start the process
#exec myprocess

###
### https://nodeside.com/blog/nodejs-as-upstart-service-for-ubuntu-centos
#description 'nodejs example upstart'
#author 'Yonatan Ellman (blog.nodeside.com) adpated from ivarprudnikov.com'
#
#env NAME=TEST
#env LOG_FILE=/var/log/nodejs-test.log
#env USER=nodejs
#env NODE_BIN=/usr/local/bin/node
#env NODE_ENV="development"
#env PORT=3001
#env DIRECTORY=/var/www/yourapp
#env APP=app.js
#
#start on runlevel [23]
#stop on shutdown
#
## Respawn in case of a crash, with default parameters
#respawn
## 10 times in 90 seconds.
#respawn limit 10 90
#
#script
#  cd $DIRECTORY
#  su $USER
#  # Make sure logfile exists and can be written by the user we drop privileges to
#  touch $LOG_FILE
#  chown $USER:$USER $LOG_FILE
#  # recommended approach in case of su/sudo usage so that service does not fork
#  exec sudo -u $USER PORT=$PORT NODE_ENV=$NODE_ENV $NODE_BIN $DIRECTORY/$APP >> $LOG_FILE 2>&1
#end script
#
#post-start script
#  echo "app $NAME $NODE_ENV post-start event" >> $LOG_FILE
#end script

###
### http://kvz.io/blog/2009/12/15/run-nodejs-as-a-service-on-ubuntu-karmic/
#description "Transloadit.com node.js API 2"
#author      "kvz"
#
#stop on shutdown
#respawn
#respawn limit 10 90
#
## Max open files are @ 1024 by default. Bit few.
#limit nofile 32768 32768
#
#script
#  set -e
#  mkfifo /tmp/api2-log-fifo
#  ( logger -t api2 </tmp/api2-log-fifo & )
#  exec >/tmp/api2-log-fifo
#  rm /tmp/api2-log-fifo
#  exec sudo -u www-data MASTERKEY=`cat /transloadit/keys/masterkey` /transloadit/bin/server 2>&1
#end script
#
#post-start script
#   /transloadit/bin/notify.sh 'API2 Just started'
#end script

