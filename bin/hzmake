#!/usr/bin/env python3

import sys, time, os, re, subprocess, types, contextlib
import fnmatch, shutil, glob, tempfile, itertools
from pprint import pprint
import timeit

HOME = os.environ['HOME']
_rhost = '192.168.2.115'
_ruser = 'build'
_rhome = _ruser + '@' + _rhost + ':.' #_rhome = '/home/build'
_this_module = sys.modules[__name__]
# setattr(sys.modules[__name__], x, os.environ.get(x, None))

### http://stackoverflow.com/questions/6760685/creating-a-singleton-in-python

class GlobalSingleton(type):
    #_instances = {}
    def __call__(cls, *args, **kwargs):
        T = super(GlobalSingleton, cls)
        o = getattr(_this_module, cls.__name__, None)
        if isinstance(o, T):
            #print('exists', T.__name__, type(o).__name__, cls.__name__)
            assert type(o) == cls
        else:
            #print('create', T.__name__, type(o).__name__, cls.__name__)
            o = T.__call__(*args, **kwargs)
            setattr(_this_module, cls.__name__, o)
        return o
        #if cls not in cls._instances:
        #    cls._instances[cls] = super(GlobalSingleton, cls).__call__(*args, **kwargs)
        #return cls._instances[cls]

class Apk(object):
    _AppConfig          = 'src/com/huazhen/barcode/app/AppConfig.java'
    _Log_h              = 'jni/Utils/log.h'
    _AndroidManifest    = 'AndroidManifest.xml'
    _Crypto             = 'tools/Crypto.bat'
    _CryptoRelease      = 'tools/CryptoRelease.bat'

    def __call__(self, *args, **kwargs):
        return self

    def __init__(self, arg_lis, arg_dic):
        self.prjname = type(self).__name__ # arg_lis.pop(0)
        # print('Apk:prjname', self.prjname) # print(arg_dic, *arg_lis)
        for x,y in ('SRC','src'),('OUT','out'):
            setattr(self, x, arg_dic.pop(x, os.environ.get(x, y)))

        self.src = os.path.join(self.SRC,self.prjname)
        self.out = os.path.join(self.OUT,self.prjname)
        self.datestr = time.strftime('%Y%m%d')
        self._CryptoRelease = os.path.join(self.SRC, self._CryptoRelease)
        self._Crypto = os.path.join(self.src, self._Crypto)
        assert os.path.exists(self.src)

        self.__load_vers_info(self.prefix_src, arg_dic)

        self.outdir = self.prefix_out(self.ver2())
        self.apkfile = self.prefix_out(self.ver2(),'Game.apk')
        self.libfiles = [ self.prefix_src(x) for x in ('libs/armeabi-v7a/libBarcode.so','libmtkhw.so') ]
        self.depfiles = [ self.apkfile ] + self.libfiles
        self.export_filename = self.apkfile
        self.outfiles = [ os.path.join(self.outdir,os.path.basename(x)) for x in self.depfiles ]

        print(self.svnrev(old=1), '=>', self.svnrev(), self.fullver(), self.export_filename)
        #self.outfiles = []
        #if env.VARIANT == 'g500':
        #    #d = 'mt6580/alps/' 'packages/apps/Game/'
        #    libdir = apkdir = os.path.join(self.outdir,'packages/apps/Game')
        #else:
        #    libdir = os.path.join(self.outdir,'vendor/g368_noain_t300/application/lib')
        #    apkdir = os.path.join(self.outdir,'vendor/g368_noain_t300/application/internal')
        #for sf in self.depfiles:
        #    if sf.endswith('.apk'):
        #        self.outfiles.append( os.path.join(apkdir, 'Game.apk') )
        #    else:
        #        assert sf.endswith('.so'):
        #        self.outfiles.append( os.path.join(libdir, os.path.basename(sf)) )

    def __load_vers_info(self, prefix, arg_dic):
        for x in 'OldSVNRev', 'NewSVNRev', 'OldVer', 'NewVer':
            y = arg_dic.pop(x, None)
            if y:
                y = tuple(map(int,y))
            setattr(self, x, y)
        re_ver = re.compile('\spublic\s.*\sString\s+VERSION\s*=\s*"v(\d+)\.(\d+)\.(\d+)(-r\d+)?"')
        re_svnrev = re.compile('\spublic\s.*\sString\s+SVNVERSION\s*=\s*"new-svn(\d+)"')
        with open( prefix(self._AppConfig), 'r') as cf:
            for line in cf:
                if not self.OldVer:
                    r = re.search(re_ver, line)
                    if r:
                        self.OldVer = tuple(map(int,r.group(1,2,3)))
                if not self.OldSVNRev:
                    r = re.search(re_svnrev, line)
                    if r:
                        self.OldSVNRev = (int(r.group(1)),)
        if not self.NewVer:
            self.NewVer = ( self.OldVer[0], self.OldVer[1], self.OldVer[2]+1 )
        if not self.NewSVNRev:
            self.NewSVNRev = subprocess.check_output('svn info "{}" |grep -Po "^Revision:\s+\K\d+"'.format(self.src), shell=True)
            self.NewSVNRev = self.NewSVNRev.decode().strip()
            self.NewSVNRev = (int(self.NewSVNRev),)

    def generate_makefile(self, Make1,Make2,Make3, *args, **kwargs):
        sl_arg_dic = [ '='.join(p) for p in _arg_dic.items() if p[0]!='RARPWD' ]

        libBarcode = self.prefix_src('libs/armeabi-v7a/libBarcode.so')
        with Make1(libBarcode) as cmd:
            cmd('test -d "{}"'.format(self.src))
            cmd(sys.argv[0], self.prjname+'.edit_build_tree', *sl_arg_dic)
            cmd('cp -vf', self._CryptoRelease, self._Crypto)
            cmd('mkdir -p', self.outdir)
            cmd('$(MAKE)', 'info_'+self.prjname)
            cmd(sys.argv[0], 'waitfiles', self.export_filename, *self.libfiles)

        with Make1(self.export_filename, libBarcode) as cmd:
            cmd('test -f "{}"'.format(self.export_filename))
            #cmd(sys.argv[0], 'waitfiles', self.export_filename, *self.libfiles)
            cmd('cp -vrt', self.outdir, *self.libfiles)
            cmd('rsync -RrL', 'bin/hzrbuild', self.outdir, _rhome)
            if self.prjname == 'Game14':
                cmd('ssh {}@{}'.format(_ruser,_rhost), 'make -f',Make2.file.name, 'rrsync_up'+self.prjname)
        if self.prjname == 'Game14':
            with Make2('rrsync_up'+self.prjname) as cmd:
                cmd('rsync -vRrL', self.outdir, AndClassic.rhome)
            Make2.phony('rrsync_up'+self.prjname)

        with Make1(self.prjname, self.export_filename) as cmd:
            pass

        with Make1('update_'+self.prjname) as cmd:
            pass #cmd('cd', self.src, '&& svn up')

        with Make1('clean_'+self.prjname) as cmd:
            cmd('rm -rf', self.outdir)

        with Make1('info_'+self.prjname) as cmd:
            cmd('#')
            cmd('#', *map(lambda s:s.strip(), grep('Key', 'src/howto.txt')) )
            cmd('#', self.svnrev(old=1), '=>', self.svnrev(), self.fullver(), self.export_filename.replace('/','\\'))
            cmd('# ===============================================')

    def svn_commit_confirm(self, *args, **kvargs):
        d = self.vars(**kvargs)
        d.setdefault('ExtraVersionInfo','')

        bash_command('cd {} && svn diff --summarize'.format(self.src))
        msg = "Version{ExtraVersionInfo}({OldVer}=>{NewVer}, {OldSVNRev}=>{NewSVNRev}) updated".format(**d)
        print(msg)
        y = input('commit %s? (y/N): ' % self.src)
        if y.lower() in ('y','yes'):
            self.commit_msg = msg
            return True
        return False

    def svn_revert(self, *args, **kvargs):
        bash_command('cd {} && svn revert {}'.format(self.src, self._AppConfig))

    def svn_commit(self, *args, **kvargs):
        self.version_set(self.prefix_src(self._AppConfig), self.ver(), self.svnrev())
        bash_command('cd {} && svn commit -m"{}"'.format(self.src, msg))

    def edit_build_tree(self, *args, **kvargs):
        fp = os.path.join(self.src,'.project')
        print('edit:', fp, '<name>', self.prjname)
        etree_replace_text(fp, './name', self.prjname)

        #copyfile(self._CryptoRelease, self._Crypto)

        log_h = self.prefix_src(self._Log_h)
        print('edit:', log_h, 'BUILD_RELEASE')
        edit('^[^\s]+#\s*define\s+BUILD_RELEASE', '#define BUILD_RELEASE', log_h, count=1)

        if self.prjname == 'Game16k550':
            pass

        if self.prjname == 'Game16':
            fp = self.prefix_src(self._AndroidManifest)
            print('edit:', fp, 'android.uid.system')
            edit('\sandroid:versionName="(\d+\.\d+)"\s'
                    , ' android:versionName="\\1" android:sharedUserId="android.uid.system" '
                    , fp, count=1)

        if self.prjname == 'Game14':
            #for fp in glob.glob(os.path.join(self.src, 'doc/*.xls')):
            #    shutil.copy(fp, '/samba/release1/doc/')
            with open('svn.log.{}.{}'.format(self.prjname,self.ver()), 'w') as f:
                bash_command('svn log -r{}:HEAD {}'.format(self.svnrev(old=1), self.src), stdout=f)
                print(self.fullver()
                        , '%s => %s' % (self.svnrev(old=1),self.svnrev())
                        , '%s => %s' % (self.ver(old=1),self.ver()), file=f)
                #print('$ vim', self.prefix_src('doc/版本发布记录.txt'), f.name)

        self.version_set(self.prefix_src(self._AppConfig), self.ver(), self.svnrev())

    def version_set(self, appconfig_java, ver, svnrev):
        lines = []
        with open(appconfig_java) as sf:
            lines = sf.readlines()

        re_ver = re.compile('\spublic\s.*\sString\s+VERSION\s*=\s*"v\d+\.\d+\.\d+(-r\d+)?"')
        re_svnrev = re.compile('\spublic\s.*\sString\s+SVNVERSION\s*=\s*"new-svn\d+"')
        with open(appconfig_java, 'w') as outf:
            def repf(r):
                if 'SVNVERSION' in r.group(0):
                    return re.sub('=\s*"new-svn\d+"', '= "new-svn{}"'.format(svnrev), r.group(0))
                #if self.VARIANT == 'test': #return re.sub('=\s*"v[^"]+"', '= "v{}-{}"'.format(ver, svnrev), r.group(0))
                return re.sub('=\s*"v[^"]+"', '= "v{}"'.format(ver), r.group(0))
            for line in lines:
                lin = re.sub(re_ver, repf, line)
                if lin is line:
                    lin = re.sub(re_svnrev, repf, line)
                if not (lin is line):
                    print('edit:', appconfig_java, re.search('(\w+)\s*=\s*"([^"]+)', lin).groups())
                outf.write(lin)

    def copytree2(self, src, dst, **kwargs):
        copytree(src, dst, remove=1, ignore=['.svn','.git'])

    def clean(self):
        if os.path.exists(self.out):
            shutil.rmtree(self.out, ignore_errors=True)

    def prefix_src(self, *p):
        return os.path.join(self.src, *p)
    def prefix_out(self, *p):
        return os.path.join(self.out,*p)

    #def copyoutfiles(self):
    #    for sf in self.depfiles:
    #        if sf.startswith(self.outdir):
    #            continue
    #        copyfiles2(self.outdir, sf, makedirs=1)

    def ver2(self):
        return '{}-r{}'.format(self.ver(), self.svnrev())
    def ver(self, old=0):
        if old:
            return '.'.join(map(str,self.OldVer))
        return '.'.join(map(str,self.NewVer))
    def svnrev(self, old=0):
        if old:
            return '.'.join(map(str,self.OldSVNRev))
        return '.'.join(map(str,self.NewSVNRev))
    def fullver(self):
        return '{}-{}-r{}-{}'.format(self.prjname, self.ver(), self.svnrev(), self.datestr)
    def platver(self, plt):
        return '{}-{}-{}'.format(plt, self.ver(), self.datestr)
    def vars(self, **kvargs):
        d = vars(self).copy()
        d.update(OldSVNRev=self.svnrev(old=1)
                , NewSVNRev=self.svnrev(), OldVer=self.ver(old=1), NewVer=self.ver())
        d.update(**kvargs)
        return d
    #def __str__(self): return ','.join((OldVer, OldSVNRev, NewVer, NewSVNRev))

class Game14(Apk,metaclass=GlobalSingleton):
    pass
class Game16(Apk,metaclass=GlobalSingleton):
    pass
class Game16K550(Apk,metaclass=GlobalSingleton):
    pass

class Android(object):
    #def __call__(self, *args, **kwargs): return self
    def __init__(self, arg_lis, arg_dic):
        # print('Android:',self.prjname, self.apk.prjname, self.apk.fullver())
        #if self.prjname.startswith('cvk'):
        #    self.prjname = self.prjname.replace('cvk','k')
        self.outname = '{}-{}-{}'.format(self.prjname, self.apk.ver(), time.strftime('%Y%m%d'))
        self.outdir = os.path.join('release1', self.outname)
        self.out = self.outdir
        self.outrar = self.outdir + '.rar'
        #super().__init__(arg_lis, arg_dic)

class AndClassic(Android):
    host = '192.168.2.113'
    user = 'build'
    rhome = 'build@192.168.2.113:.' # home = '/home/build'

    def __init__(self, arg_lis, arg_dic):
        self.prjname = type(self).__name__
        self.apk = Game14(arg_lis, arg_dic)
        self.src = os.path.join('android',self.prjname) #'/osca/' + self.prjname
        self.apkdir = os.path.join(self.src, 'vendor/g368_noain_t300/application', 'internal')
        self.libdir = os.path.join(self.src, 'vendor/g368_noain_t300/application', 'lib')
        apkfile = os.path.basename(self.apk.apkfile)
        self.depfiles = [ os.path.join(self.apkdir,apkfile) ] + [ os.path.join(self.libdir,os.path.basename(x)) for x in self.apk.libfiles ]
        for x in self.depfiles:
            assert x.endswith('.apk') or x.endswith('.so')
        super().__init__(arg_lis, arg_dic)

    def generate_makefile(self, Make1,Make2,Make3, *args, RARPWD=None, **kwargs):
        from os.path import join,basename,dirname
        assert RARPWD

        with Make1(self.prjname, self.apk.prjname) as cmd:
            cmd('ssh {}@{}'.format(_ruser,_rhost), 'make -f',Make2.file.name, self.prjname)
        #with Make1(self.outdir) as cmd:
        #    cmd('ssh {}@{}'.format(_ruser,_rhost), 'make -f',Make2.file.name, self.outdir)
        with Make2(self.prjname, self.outrar) as cmd:
            pass #cmd('ssh {}@{}'.format(self.user,self.host), 'make -f',Make3.file.name, self.prjname)
        with Make2(self.outrar, self.outdir) as cmd:
            cmd('cd {0}/.. && rar a -hp{1} {2}.rar {2}'.format(self.outdir, RARPWD, basename(self.outdir)))
        with Make2(self.outdir) as cmd:
            cmd('ssh {}@{}'.format(self.user,self.host), 'make -f',Make3.file.name, self.outdir)
            cmd('rsync -vrL', join(self.rhome,self.outdir), dirname(self.outdir))
        #with Make3(self.prjname, self.outdir) as cmd:
        #    pass
        with Make3(self.outdir, *self.depfiles) as cmd:
            cmd('bin/hzrbuild', self.src, '/osca/release/'+self.outname)
            #cmd('mkdir -p', dirname(self.outdir), '&& ln -vsnf', rout, self.outdir)
            cmd('[ -d "release1/{}" ]'.format(self.outname))
        #with Make2(self.outdir) as cmd: # , *self.depfiles
        #    #cmd('rsync -vRL', 'bin/hzrbuild', Make2.file.name, self.rhome)
        #    #cmd('rsync -vrL {} {}'.format(join(self.rhome,self.outdir), dirname(self.outdir)))
        #    #Mk('\t', '[ -e "{}" ]'.format(self.build), '&& cp -vft', self.libdir, *filter(lambda x:x.endswith('.so'), self.depfiles))

        dd = dict( (basename(x),x) for x in self.apk.outfiles )
        for t in self.depfiles:
            x = dd[ basename(t) ]
            with Make3(t) as cmd: # (t,x)
                cmd('/bin/cp -vf', x, '$@')

        _clean = 'clean_'+self.prjname
        with Make1(_clean) as cmd:
            cmd('ssh {}@{}'.format(_ruser,_rhost), 'make -f',Make2.file.name, _clean)
        with Make2(_clean) as cmd:
            cmd('ssh {}@{}'.format(self.user,self.host), 'make -f',Make3.file.name, _clean)
            cmd('rm -rf', self.outdir)
            cmd('rm -f' , self.outrar)
        with Make3(_clean) as cmd:
            cmd('rm -rf', self.outdir)
            cmd('rm -f' , self.outrar)
            cmd('rm -f' , *self.depfiles)

        _update = 'update_'+self.prjname
        with Make1(_update) as cmd:
            cmd('ssh {}@{}'.format(_ruser,_rhost), 'make -f',Make2.file.name, _update)
        with Make2(_update) as cmd:
            pass
        with Make3(_update) as cmd:
            pass

class k400(AndClassic, metaclass=GlobalSingleton):
    pass
class k350c(AndClassic, metaclass=GlobalSingleton):
    pass
class k350t(AndClassic, metaclass=GlobalSingleton):
    pass
class k550(AndClassic, metaclass=GlobalSingleton):
    pass

class g500(Android, metaclass=GlobalSingleton):
    def __init__(self, arg_lis, arg_dic):
        self.prjname = type(self).__name__
        self.apk = Game16(arg_lis, arg_dic)
        self.src = 'mt6580/alps'
        #self.out = 'mt6580/alps'
        apkdir = os.path.join(self.src,'packages/apps/Game')
        libdir = apkdir
        apkfile = os.path.basename(self.apk.apkfile)
        self.depfiles = [ os.path.join(apkdir,apkfile) ] + [ os.path.join(libdir,os.path.basename(x)) for x in self.apk.libfiles ]
        super().__init__(arg_lis, arg_dic)

    def generate_makefile(self, Make1,Make2,Make3_, *args, RARPWD=None, **kwargs):
        assert RARPWD

        with Make1(self.prjname, self.apk.prjname) as cmd:
            cmd('ssh {}@{}'.format(_ruser,_rhost), 'make -f',Make2.file.name, self.prjname)
        with Make2(self.prjname, self.outrar) as cmd:
            pass

        dd = dict( (os.path.basename(x),x) for x in self.apk.outfiles )
        for t in self.depfiles:
            x = dd[ os.path.basename(t) ]
            with Make2(t) as cmd: # (t,x)
                cmd('/bin/cp -vf', x, '$@')

        with Make2(self.outrar, self.outdir) as cmd:
            cmd('cd {0}/.. && rar a -hp{1} {2}.rar {2}'.format(self.outdir, RARPWD, self.outname))

        with Make1(self.outdir) as cmd:
            cmd('ssh {}@{}'.format(_ruser,_rhost), 'make -f',Make2.file.name, self.outdir)
        with Make2(self.outdir, *self.depfiles) as cmd: # , *self.depfiles
            cmd('cd', self.src
                , '&& source build/envsetup.sh'
                , '&& lunch full_ckt6580_we_l-user && make -j8')
            cmd('mt6580-copyout.sh', self.src, self.outdir)

        _clean = 'clean_'+self.prjname
        with Make1(_clean) as cmd:
            cmd('ssh {}@{}'.format(_ruser,_rhost), 'make -f',Make2.file.name, _clean)
        with Make2(_clean) as cmd:
            cmd('rm -rf', self.outdir)
            cmd('rm -f' , self.outrar)
            cmd('rm -f' , *self.depfiles)

        _update = 'update_'+self.prjname
        with Make1(_update) as cmd:
            cmd('ssh {}@{}'.format(_ruser,_rhost), 'make -f',Make2.file.name, _update)
        with Make2(_update) as cmd:
            cmd('cd', self.src, '&& git pull')

class Main(object, metaclass=GlobalSingleton):
    def __init__(self, arg_lis, arg_dic):
        Make1 = Makefile()
        Make2 = Makefile('Makefile2')
        Make3 = Makefile('Makefile3')
        for mk in Make1,Make2,Make3:
            mk.line('### Auto-generated')
            mk.line('')
            mk.line('export SHELL=/bin/bash')
            mk.line('export PATH:=$(PATH):$(HOME)/bin')
            mk.line('')

        alls, ands, apks = {}, {}, {}
        for a in set(arg_lis):
            T = getattr(_this_module, a)
            argl, argd = arg_lis[:], arg_dic.copy()
            o = T(argl, argd)
            alls.setdefault(o.apk, (argl,argd))
            alls.setdefault(o, (argl,argd))
            ands.setdefault(o, (argl,argd))
            apks.setdefault(o.apk, (argl,argd))

        names = [ x.prjname for x in ands.keys() ]
        with Make1('all',*names):
            pass
        names = [ x.prjname for x in apks.keys() ]
        with Make1('games',*names):
            pass
        names   = [ x.prjname for x in alls.keys() ]
        clean_  = list(map(lambda x:'clean_'+x, names))
        update_ = list(map(lambda x:'update_'+x, names))
        info_   = list(map(lambda x:'info_'+x, names))
        with Make1('clean', *clean_):
            pass
        with Make1('update', *update_):
            pass
        with Make1('info', *info_):
            pass

        for o,(a,d) in alls.items():
            o.generate_makefile(Make1,Make2,Make3, *a, **d)

        #deps = itertools.chain(names, clean_, update_, info_)
        Make1.phony('all', 'games', 'clean', 'update')
        for syms in (names, clean_, update_, info_):
            Make1.phony(*syms)

        with Make1('sync_makefile', Make2.file.name, Make3.file.name) as cmd:
            cmd('rsync', Make2.file.name, Make3.file.name, _rhome)
            cmd('ssh {}@{}'.format(_ruser,_rhost), 'make -f',Make2.file.name, 'sync_makefile')
        with Make2('sync_makefile', Make2.file.name, Make3.file.name) as cmd:
            cmd('rsync', Make3.file.name, AndClassic.rhome)
        Make1.phony('sync_makefile')

        for mk in Make1,Make2,Make3:
            mk.__exit__(None,None,None)
        bash_command('make sync_makefile')

    def help(self, *args, **kvargs):
        print('''\
Usages:
    make clean update all

'''.format(sys.argv[0], ','.join(args)))
        #self.show_info(*args, **kvargs)

    def default(self, *args, **kwargs):
        pass
        #for x,y in ('OldSVNRev','1'), ('NewSVNRev','1'), ('OldVer','1.0.0'), ('NewVer','1.0.0'):
        #    v = kvargs.get(x, os.environ.get(x, y))
        #    if v and type(v) == str:
        #        v = tuple(map(int,v.split('.')))
        #    setattr(Apk, x, v)
        #ver = max( prj.NewVer for prj in self.projects )
        #for prj in self.projects:
        #    prj.NewVer = ver

    #def prebuild_apk(self, *args, **kvargs):
    #        print('>>> prebuild_apk:', prj.src, prj.build)

    #        for x,y in walk('eclipse', prj.name):
    #            if not x.endswith('.projects'):
    #                y = os.path.join(x,y)
    #                print('rmtree:', y)
    #                shutil.rmtree(y, ignore_errors=True )
    #        fp = os.path.join(prj.build,'.project')
    #        print('edit:', fp, '<name>', prj.name)
    #        etree_replace_text(fp, './name', prj.name)

    #        if self.VARIANT == 'release':
    #            sf, df = self._Crypto0, os.path.join(prj.build,self._Crypto1)
    #            print('copyfile:', sf, df)
    #            shutil.copyfile(sf, df)
    #            log_h = os.path.join(prj.build,self._Log_h)
    #            print('edit:', log_h, 'BUILD_RELEASE')
    #            edit('^[^\s]+#\s*define\s+BUILD_RELEASE', '#define BUILD_RELEASE', log_h, count=1)

    #        if prj.name == 'Game16':
    #            fp = os.path.join(prj.build, self._AndroidManifest)
    #            print('edit:', fp, 'android.uid.system')
    #            edit('\sandroid:versionName="(\d+\.\d+)"\s'
    #                    , ' android:versionName="\\1" android:sharedUserId="android.uid.system" '
    #                    , fp, count=1)
    #            #subprocess.check_call(command('cd mt6580 && git pull'), shell=True, executable='/bin/bash')

    #        if prj.name == 'Game14':
    #            for fp in glob.glob(os.path.join(prj.build, 'doc/*.xls')):
    #                print('copy:', fp)
    #                shutil.copy(fp, '/samba/release1/doc/')
    #            with open('svn.log.{}.{}'.format(prj.name,prj.ver()), 'w') as f:
    #                bash_command('svn log -r{}:HEAD {}'.format(prj.svnrev(old=1), prj.src), stdout=f)
    #                print(prj.fullver()
    #                        , '%s => %s' % (prj.svnrev(old=1),prj.svnrev())
    #                        , '%s => %s' % (prj.ver(old=1),prj.ver()), file=f)
    #                print('$ vim', os.path.join(self.SRC,'Game14/doc/版本发布记录.txt'), f.name)

    #    bash_command('cd {} && make -f Game14.mk PLATS={} release'
    #        .format(self.BUILD, ','.join(prj2.plats)))

    #def version_commit(self, *args, **kvargs):
    #    prjs = []
    #    def revert(self):
    #        for prj,msg in prjs:
    #            bash_command('cd {} && svn revert {}'.format(prj.src, prj._AppConfig))
    #    try:
    #        kvargs.setdefault('ExtraVersionInfo','')
    #        for prj in self.projects:
    #            d = prj.vars(**kvargs)
    #            bash_command('cd {} && svn diff --summarize'.format(prj.src))
    #            msg = "Version{ExtraVersionInfo}({OldVer}=>{NewVer}, {OldSVNRev}=>{NewSVNRev}) updated".format(**d)
    #            print(msg)
    #            yN = input('commit %s? (y/N): ' % prj.src)
    #            if yN.lower() not in ('y','yes'):
    #                raise EOFError
    #            prjs.append( (prj,msg) )
    #        for prj,msg in prjs:
    #            self.version_set(os.path.join(prj.src,prj._AppConfig), prj.ver(), prj.svnrev())
    #            bash_command('cd {} && svn commit -m"{}"'.format(prj.src, msg))
    #    except (KeyboardInterrupt,EOFError):
    #        revert(self)
    #    except Exception:
    #        revert(self)
    #        raise

    #def show_info(self, *args, **kvargs):
    #    #pprint(vars(self))
    #    #if args: pprint(args)
    #    #if kvargs: pprint(kvargs)
    #    #print()
    #    for s in grep('Key.*word', 'src/howto.txt'):
    #        print(s.strip())
    #    #for prj in self.projects:
    #    #    apk = prj.export_filename.replace('/','\\')
    #    #    print(prj.svnrev(old=1), '=>', prj.svnrev() , prj.fullver(), apk)
    #    #    #pprint(vars(self)) #pprint(globals())

class Makefile(object):
    class Makerule(object):
        # TODO StringIO
        def __init__(self, file_, x, *a):
            self.file = file_
            print(x, ': ', sep='',end='', file=self.file)
            print(*a, file=self.file)
        def __call__(self, *a):
            print('\t', end='', file=self.file)
            print(*a, file=self.file)
            return self
        def __exit__(self, x,y,z):
            print(file=self.file)
        def __enter__(self):
            return self
        def line(self, *a):
            print(*a, file=self.file)

    def __init__(self, name='Makefile', mode='w'):
        if type(name) == str:
            self.file = open(name, mode)
            self.need_close = 1
        else:
            self.file = name
            self.need_close = 0
    def __exit__(self, x,y,z):
        if self.need_close:
            self.file.close()
    def __enter__(self):
        return self
    def __call__(self, x, *a):
        return self.Makerule(self.file, x, *a)
    def line(self, *a):
        print(*a, file=self.file)
    def phony(self, *a):
        print('.PHONY:', *a, file=self.file)
        print(file=self.file)

def check(*args, **kvargs):
    for x in ('src/Game14/.svn', 'src/Game16/.svn'
            , 'src/tools/CryptoRelease.bat' , 'src/howto.txt'
            , 'build/Game14.mk'
            , 'mt6580'):
        assert os.path.exists(x), x + ' not exist'

def makedirs(*d, remove=False, **kwargs):
    di = os.path.join(*d)
    if remove and os.path.exists(di):
        print('rmtree:', di)
        shutil.rmtree(di, ignore_errors=True ) # os.removedirs(di)
    os.makedirs(di)
    return di

def copyfile(sf, df, *args, makedirs=1, **kwargs):
    d = os.path.dirname(df)
    if not os.path.exists(d):
        os.makedirs(d) #(, exist_ok=True)
    print('copyfile:', sf, df)
    shutil.copyfile(sf, df)

def copyfiles2(self, out, *files, makedirs=1, remove=0, **kwargs):
    if os.path.exists(out):
        if remove:
            print('rmtree:', out)
            shutil.rmtree(out, ignore_errors=True )
    for sf in files:
        copyfile(sf, out, makedirs=makedirs)

def copytree(src, dst, remove=False, ignore=[], **kwargs):
    if remove and os.path.exists(dst):
        print('rmtree:', dst)
        shutil.rmtree(dst, ignore_errors=True)
    print('copytree:', src, dst)
    if not callable(ignore):
        ignore_ = ignore
        ignore = lambda d,names: ignore_
    shutil.copytree(src, dst, ignore=ignore)
    #if not os.path.exists(outdir):
    #    os.makedirs(outdir, exist_ok=True)

def waitfiles(*files, **kwargs):
    #for s in grep('Key.*word', 'src/howto.txt'): print(s.strip())
    #for prj in self.projects:
    #    apk = prj.export_filename.replace('/','\\')
    #    print(prj.svnrev(old=1), '=>', prj.svnrev() , prj.fullver(), apk)
    #    #pprint(vars(self)) #pprint(globals())
    def sizes():
        sz = sum( os.stat(f).st_size for f in files )
        print(sz, end='..')
        return sz
    #print('...', *files)
    while not _Stopped:
        while not _Stopped:
            if sum(os.path.exists(x) for x in files) == len(files):
                sz0 = sizes()
                break
            time.sleep(1.5)
        else: break
        time.sleep(4)
        sz0, sz1 = sizes(), sz0
        if sz0 == sz1:
            break

def walk(top, name):
    for basedir, dirs, files in os.walk(top):
        for x in fnmatch.filter(dirs, name):
            dirs.remove(x)
            yield (basedir,x)
        for x in fnmatch.filter(files, name):
            yield (basedir,x)

#def command(s, *args, **kv):
#    cmd = s.format(*args, **kv)
#    #print(cmd)
#    return cmd
def bash_command(cmd, shell=True,executable='/bin/bash',**kv):
    print(cmd)
    return subprocess.check_call(cmd, shell=shell, executable=executable, **kv)

def etree_replace_text(filename, path, text):
    from xml.etree.ElementTree import ElementTree
    tree = ElementTree(file=filename)
    node = tree.find(path)
    if node != None:
        node.text = text
        tree.write(filename, encoding='UTF-8', xml_declaration=True) #(, short_empty_elements=False)

def edit(expr, ss, *files, count=-1):
    for textf in files:
        lines = []
        with open(textf) as sf:
            lines = sf.readlines()
        with open(textf, 'w') as outf:
            for line in lines:
                if count > 0:
                    l, line = line, re.sub(expr, ss, line)
                    if not (l is line):
                        count -= 1
                outf.write( line )

def grep(expr, *files, filt=None):
    try:
        for textf in files:
            with open(textf) as sf:
                for line in sf:
                    res = re.search(expr, line)
                    if res:
                        if filt: line = filt(line, res)
                        if line:
                            yield line
    except IOError as e:
        print(textf, e, file=sys.stderr)
        raise

def _object(attr):
    if isinstance(attr, dict):
        return type('_', (object,), dict( (x,_object(y)) for x,y in attr.items()))
    if isinstance(attr, (tuple, list, set, frozenset)):
        return type(attr)(_object(x) for x in attr)
    return attr

def bootstrap(*xfs):
    import signal
    def _sig_handler(signal, frame):
        global _Stopped
        _Stopped = 1
    signal.signal(signal.SIGINT, _sig_handler)

    def _fn_lis_dic(args):
        fn, lis, dic = '', [], {} # defaultdict(list)
        for a in args:
            if a.startswith('-'):
                assert ( '=' in a )
                a = a.strip('-')
            if '=' in a:
                k,v = a.split('=',1)
                v0 = dic.setdefault(k,v)
                if v0 is not v:
                    if type(v0) == list:
                        v0.append(v)
                    else:
                        dic[k] = [v0, v]
            else:
                if not fn:
                    fn = a
                else:
                    lis.append(a)
        global _FUNC
        _FUNC = fn
        return fn.split('.'), lis, dic

    global _arg_lis, _arg_dic
    syms, _arg_lis, _arg_dic = _fn_lis_dic(sys.argv[1:])
    for xf in xfs:
        xf(*_arg_lis, **_arg_dic) #setattr(_this_module, name, Type(*_arg_lis, **_arg_dic))

    a_lis, a_dic = _arg_lis[:], _arg_dic.copy()
    #print(a_dic, *a_lis)

    def _geta(scope, sym):
        obj = getattr(scope, sym, None)
        if not obj and scope == _this_module:
            Main = getattr(scope,'Main',None)
            if Main:
                return getattr(Main(a_lis,a_dic), sym, None)
        return obj

    def _fn(obj, sym, *symbs):
        X = _geta(obj, sym)
        if symbs:
            #print(sym, type(X), X is Apk)
            #print(*symbs)
            return _fn(X(a_lis, a_dic), *symbs)
        return X

    t = timeit.default_timer()
    _fn(_this_module, *syms)(*a_lis, **a_dic)
    #print(a_dic, *a_lis)
    sys.stdout.flush()
    m,s = divmod(timeit.default_timer() - t, 60)
    print('time({}): {}m{}s'.format(_FUNC, int(m), int(s)), file=sys.stderr)

if __name__ == '__main__':
    try:
        _Stopped = 0
        bootstrap()
    except Exception as e:
        #print(e, file=sys.stderr)
        raise

    #import argparse
    #
    #parser = argparse.ArgumentParser()
    #subparsers = parser.add_subparsers()
    #
    #hello_parser = subparsers.add_parser('hello')
    #hello_parser.add_argument('name')
    ## add greeting option w/ default
    #hello_parser.add_argument('--greeting', default='Hello')
    ## add a flag (default=False)
    #hello_parser.add_argument('--caps', action='store_true')
    #hello_parser.set_defaults(func=greet)
    #
    #goodbye_parser = subparsers.add_parser('goodbye')

