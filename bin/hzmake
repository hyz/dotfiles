#!/usr/bin/env python3

import sys, time, os, re, subprocess, types, contextlib
import fnmatch, shutil, glob, tempfile
from pprint import pprint
import timeit

HOME = os.environ['HOME']
_rhost = '192.168.2.113'
_rhome = '/home/wood'
# setattr(sys.modules[__name__], x, os.environ.get(x, None))

### http://stackoverflow.com/questions/6760685/creating-a-singleton-in-python
class Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]

class Android(object, metaclass=Singleton):
    #if name == 'g500':
    #    basedir = 'packages/apps/Game/'
    #    files = [ os.path.join(basedir,x) for x in ('libBarcode.so', 'libmtkhw.so', 'Game.apk') ]
    #    return type('Android'+name, (object,), {'files':files,'name':name,'root':'mt6580/alps'})
    #elif name in ('k400','cvk350c','cvk350t'):
    #    basedir = 'vendor/g368_noain_t300/application'
    #    files = [ os.path.join(basedir,x) for x in ('lib/libBarcode.so', 'lib/libmtkhw.so', 'internal/Game.apk') ]
    #    return type('Android'+name, (object,), {'files':files,'name':name,'root':os.path.join('/tmp',name)})
    #assert False, name

    _Release_Dir = '/samba/release1'

    def __init__(self, arg_lis, arg_dic):
        self.plat = arg_list.pop(0)
        self.ver = arg_list.pop(0)
        # print(arg_dic, *arg_lis)

    def _make_archive(self, plt, prj, rarpwd):
        bash_command('cd /samba/release1'
                ' && ( rm -f {0}.rar ; rar a -hp{1} {0}.rar /samba/release1/{0} )'
                .format(prj.platver(plt), rarpwd))

    def rar(self, *args, RARPWD=None, **kvargs):
        assert RARPWD
        for prj in self.projects:
            for plt in prj.plats:
                self._make_archive(plt, prj, RARPWD)

class Apk(object, metaclass=Singleton):
    _AppConfig          = 'src/com/huazhen/barcode/app/AppConfig.java'
    _Log_h              = 'jni/Utils/log.h'
    _AndroidManifest    = 'AndroidManifest.xml'
    _Crypto             = 'tools/Crypto.bat'
    _CryptoRelease      = 'tools/CryptoRelease.bat'

    def __init__(self, arg_lis, arg_dic):
        # print(arg_dic, *arg_lis)
        for x,y in ('SRC','src'),('BUILD','build'):
            setattr(self, x, arg_dic.pop(x, os.environ.get(x, y)))

        self.prjname = arg_lis.pop(0)
        self.src = os.path.join(self.SRC,self.prjname)
        self.build = os.path.join(self.BUILD,self.prjname)
        self.datestr = time.strftime('%Y%m%d')
        self._CryptoRelease = os.path.join(self.SRC, self._CryptoRelease)
        self._Crypto = os.path.join(self.build, self._Crypto)
        assert os.path.exists(self.src)

        self.__init_vers_from_src(arg_dic)

        self.outdir = self.prefix_build(self.ver2())
        self.export_filename = self.prefix_build(self.ver2(),'Game.apk')
        self.depfiles = [ self.prefix_build(x) for x in ('libs/armeabi-v7a/libBarcode.so','libmtkhw.so') ]

        #self.outfiles = []
        #if env.VARIANT == 'g500':
        #    #d = 'mt6580/alps/' 'packages/apps/Game/'
        #    libdir = appdir = os.path.joini(self.outdir,'packages/apps/Game')
        #else:
        #    libdir = os.path.join(self.outdir,'vendor/g368_noain_t300/application/lib')
        #    appdir = os.path.join(self.outdir,'vendor/g368_noain_t300/application/internal')
        #for sf in self.depfiles:
        #    if sf.endswith('.apk'):
        #        self.outfiles.append( os.path.join(appdir, 'Game.apk') )
        #    else:
        #        assert sf.endswith('.so'):
        #        self.outfiles.append( os.path.join(libdir, os.path.basename(sf)) )

    def __init_vers_from_src(self, arg_dic):
        for x in 'OldSVNRev', 'NewSVNRev', 'OldVer', 'NewVer':
            y = arg_dic.pop(x, None)
            if y:
                y = tuple(map(int,y))
            setattr(self, x, y)
        re_ver = re.compile('\spublic\s.*\sString\s+VERSION\s*=\s*"v(\d+)\.(\d+)\.(\d+)(-r\d+)?"')
        re_svnrev = re.compile('\spublic\s.*\sString\s+SVNVERSION\s*=\s*"new-svn(\d+)"')
        with open( self.prefix_src(self._AppConfig),'r') as cf:
            for line in cf:
                if not self.OldVer:
                    r = re.search(re_ver, line)
                    if r:
                        self.OldVer = tuple(map(int,r.group(1,2,3)))
                if not self.OldSVNRev:
                    r = re.search(re_svnrev, line)
                    if r:
                        self.OldSVNRev = (int(r.group(1)),)
        if not self.NewVer:
            self.NewVer = ( self.OldVer[0], self.OldVer[1], self.OldVer[2]+1 )
        if not self.NewSVNRev:
            self.NewSVNRev = subprocess.check_output('svn info "{}" |grep -Po "^Revision:\s+\K\d+"'.format(self.src), shell=True)
            self.NewSVNRev = self.NewSVNRev.decode().strip()
            self.NewSVNRev = (int(self.NewSVNRev),)

    def test(self, *args, **kwargs):
        self.generate_makefile(open('Makefile','w'), *args, **kwargs)

    def generate_makefile(self, mkfile, *args, **kwargs):
        def mk(x,y,*oths):
            print(x,y,' ', sep='', file=mkfile, end='')
            print(*oths, file=mkfile)
        sl_arg_dic = [ '='.join(p) for p in _arg_dic.items() ]

        mk(self.build, ':', self.src)
        mk('\t', 'cd {} && svn up'.format(self.src))
        #mk('\t', '[ -e "{0}" ] || mkdir -p {0}'.format(self.build))
        #mk('\t', 'cd {}\\'.format(self.SRC))
        #mk('\t', '&&', 'find {} -mindepth 1 -maxdepth 1 ! -name ".svn*"\\'.format(self.prjname))
        #mk('\t',  '|', 'rsync -Rr --files-from=- . {}'.format(self.BUILD))
        mk('\t', sys.argv[0], 'Apk.copytree2', self.prjname, self.src, self.build)
        mk('\t', sys.argv[0], 'Apk.edit_build_tree', *_arg_lis, *sl_arg_dic)
        print(file=mkfile)

        mk(self.outdir, ':', self.build)
        mk('\t', 'mkdir -p $@')
        print(file=mkfile)

        shutil.rmtree(self.outdir, ignore_errors=True) # os.removedirs(di)

        mk(self.export_filename, ':', self.outdir) #(, *self.depfiles)
        mk('\t', sys.argv[0], 'waitfiles', self.export_filename, *self.depfiles)
        mk('\t', sys.argv[0], 'copyfiles2', self.outdir, *self.depfiles)
        if self.prjname == 'Game14':
            mk('\t', 'rsync -vRr', self.outdir, 'root@'+_rhost+_rhome)
            mk('\t', 'rsync -v', mkfile.name, 'root@'+_rhost+_rhome)
        #mk('\t', sys.argv[0], 'Apk.copyoutfiles', self.prjname)
        print(file=mkfile)

        #r_version_commit = 'version_commit_'+self.prjname
        #mk(r_version_commit, ':', self.src)
        #mk('\t', sys.argv[0], 'Apk.version_commit', *_arg_lis, *sl_arg_dic)

        # r_clean = 'clean_' + self.prjname
        # mk(r_clean, ':') #(, *self.depfiles)
        # mk('\t', sys.argv[0], 'Apk.clean', self.prjname)
        # print(file=mkfile)

        return [ self.export_filename ] #, [ r_version_commit ], [ r_clean ]

    def svn_commit_confirm(self, *args, **kvargs):
        d = self.vars(**kvargs)
        d.setdefault('ExtraVersionInfo','')

        bash_command('cd {} && svn diff --summarize'.format(self.src))
        msg = "Version{ExtraVersionInfo}({OldVer}=>{NewVer}, {OldSVNRev}=>{NewSVNRev}) updated".format(**d)
        print(msg)
        y = input('commit %s? (y/N): ' % self.src)
        if y.lower() in ('y','yes'):
            self.commit_msg = msg
            return True
        return False

    def svn_revert(self, *args, **kvargs):
        bash_command('cd {} && svn revert {}'.format(self.src, self._AppConfig))

    def svn_commit(self, *args, **kvargs):
        self.version_set(self.prefix_src(self._AppConfig), self.ver(), self.svnrev())
        bash_command('cd {} && svn commit -m"{}"'.format(self.src, msg))

    def edit_build_tree(self, *args, **kvargs):
        fp = os.path.join(self.build,'.project')
        print('edit:', fp, '<name>', self.prjname)
        etree_replace_text(fp, './name', self.prjname)

        copyfile(self._CryptoRelease, self._Crypto)

        log_h = self.prefix_build(self._Log_h)
        print('edit:', log_h, 'BUILD_RELEASE')
        edit('^[^\s]+#\s*define\s+BUILD_RELEASE', '#define BUILD_RELEASE', log_h, count=1)

        if self.prjname == 'Game16':
            fp = self.prefix_build(self._AndroidManifest)
            print('edit:', fp, 'android.uid.system')
            edit('\sandroid:versionName="(\d+\.\d+)"\s'
                    , ' android:versionName="\\1" android:sharedUserId="android.uid.system" '
                    , fp, count=1)

        if self.prjname == 'Game14':
            for fp in glob.glob(os.path.join(self.build, 'doc/*.xls')):
                print('copy:', fp)
                shutil.copy(fp, '/samba/release1/doc/')
            with open('svn.log.{}.{}'.format(self.prjname,self.ver()), 'w') as f:
                bash_command('svn log -r{}:HEAD {}'.format(self.svnrev(old=1), self.src), stdout=f)
                print(self.fullver()
                        , '%s => %s' % (self.svnrev(old=1),self.svnrev())
                        , '%s => %s' % (self.ver(old=1),self.ver()), file=f)
                print('$ vim', self.prefix_src('doc/版本发布记录.txt'), f.name)

        self.version_set(self.prefix_build(self._AppConfig), self.ver(), self.svnrev())

    def version_set(self, appconfig_java, ver, svnrev):
        lines = []
        with open(appconfig_java) as sf:
            lines = sf.readlines()

        re_ver = re.compile('\spublic\s.*\sString\s+VERSION\s*=\s*"v\d+\.\d+\.\d+(-r\d+)?"')
        re_svnrev = re.compile('\spublic\s.*\sString\s+SVNVERSION\s*=\s*"new-svn\d+"')
        with open(appconfig_java, 'w') as outf:
            def repf(r):
                if 'SVNVERSION' in r.group(0):
                    return re.sub('=\s*"new-svn\d+"', '= "new-svn{}"'.format(svnrev), r.group(0))
                #if self.VARIANT == 'test': #return re.sub('=\s*"v[^"]+"', '= "v{}-{}"'.format(ver, svnrev), r.group(0))
                return re.sub('=\s*"v[^"]+"', '= "v{}"'.format(ver), r.group(0))
            for line in lines:
                lin = re.sub(re_ver, repf, line)
                if lin is line:
                    lin = re.sub(re_svnrev, repf, line)
                if not (lin is line):
                    print('edit:', appconfig_java, re.search('(\w+)\s*=\s*"([^"]+)', lin).groups())
                outf.write(lin)

    def copytree2(self, src, dst, **kwargs):
        copytree(src, dst, remove=1, ignore=['.svn','.git'])

    def clean(self):
        shutil.rmtree(self.build, ignore_errors=True)

    def prefix_src(self, *p):
        return os.path.join(self.src, *p)
    def prefix_build(self, *p):
        return os.path.join(self.build,*p)

    def copyoutfiles(self):
        for sf in self.depfiles:
            if sf.startswith(self.outdir):
                continue
            copyfiles2(self.outdir, sf, makedirs=1)

    def ver2(self):
        return '{}-r{}'.format(self.ver(), self.svnrev())
    def ver(self, old=0):
        if old:
            return '.'.join(map(str,self.OldVer))
        return '.'.join(map(str,self.NewVer))
    def svnrev(self, old=0):
        if old:
            return '.'.join(map(str,self.OldSVNRev))
        return '.'.join(map(str,self.NewSVNRev))
    def fullver(self):
        return '{}-{}-r{}-{}'.format(self.prjname, self.ver(), self.svnrev(), self.datestr)
    def platver(self, plt):
        return '{}-{}-{}'.format(plt, self.ver(), self.datestr)
    def vars(self, **kvargs):
        d = vars(self).copy()
        d.update(OldSVNRev=self.svnrev(old=1)
                , NewSVNRev=self.svnrev(), OldVer=self.ver(old=1), NewVer=self.ver())
        d.update(**kvargs)
        return d
    #def __str__(self): return ','.join((OldVer, OldSVNRev, NewVer, NewSVNRev))

class Main(object, metaclass=Singleton):
    PLATS   = ['g500','k400','cvk350c','cvk350t']
    VARIANT = 'release'
    BUILD,SRC = 'build', 'src'

    _PROJECTS = {
        'Game14': [ 'k400', 'cvk350c', 'cvk350t' ]
      , 'Game16': [ 'g500' ]
    }
    _Log_h              = 'jni/Utils/log.h'
    _AndroidManifest    = 'AndroidManifest.xml'
    #_AppConfig          = ''
    _Crypto0, _Crypto1  = 'src/tools/CryptoRelease.bat', 'tools/Crypto.bat'

    def __init__(self, *args, **kvargs):
        for x,y in vars(Main).items(): #'BUILD', 'SRC' , 'VARIANT', 'PLATS' :
            if not (x.startswith('_') or callable(y)):
                setattr(self, x, kvargs.get(x, os.environ.get(x, getattr(self,x,None))))
        assert self.VARIANT in ('release','test')

        if type(self.PLATS) == str: # and ',' in self.PLATS:
            self.PLATS = self.PLATS.split(',')
        prjs = {}
        for plt in self.PLATS:
            for prjname,plats in self._PROJECTS.items():
                if plt in plats:
                    prjs.setdefault(prjname,[]).append(plt)
                    break
            else:
                assert False, plt
        for x,y in ('OldSVNRev','1'), ('NewSVNRev','1'), ('OldVer','1.0.0'), ('NewVer','1.0.0'):
            v = kvargs.get(x, os.environ.get(x, y))
            if v and type(v) == str:
                v = tuple(map(int,v.split('.')))
            setattr(Apk, x, v)
        self.projects = [ Apk(self, prjname, plts, *args, **kvargs)
                            for prjname,plts in prjs.items() ]
        ver = max( prj.NewVer for prj in self.projects )
        for prj in self.projects:
            prj.NewVer = ver

        #self.plats = set()
        #for prj in self.projects:
        #    for plt in prj.plats:
        #        self.plats.add(plt)

    def prebuild_apk(self, *args, **kvargs):
        def prebuild_apk_(self, prj):
            print('>>> prebuild_apk:', prj.src, prj.build)

            assert os.path.exists(prj.src)
            assert prj.build.startswith( Main.BUILD )

            for x,y in walk('eclipse', prj.name):
                if not x.endswith('.projects'):
                    y = os.path.join(x,y)
                    print('rmtree:', y)
                    shutil.rmtree(y, ignore_errors=True )

            if os.path.exists(prj.build):
                print('rmtree:', prj.build)
                shutil.rmtree(prj.build, ignore_errors=True )
            #os.makedirs(prj.build)

            copytree(prj.src, prj.build, ignore=[ '.svn','.git' ])
            if not os.path.exists(prj.outdir):
                os.makedirs(prj.outdir, exist_ok=True)

            fp = os.path.join(prj.build,'.project')
            print('edit:', fp, '<name>', prj.name)
            etree_replace_text(fp, './name', prj.name)

            if self.VARIANT == 'release':
                sf, df = self._Crypto0, os.path.join(prj.build,self._Crypto1)
                print('copyfile:', sf, df)
                shutil.copyfile(sf, df)
                log_h = os.path.join(prj.build,self._Log_h)
                print('edit:', log_h, 'BUILD_RELEASE')
                edit('^[^\s]+#\s*define\s+BUILD_RELEASE', '#define BUILD_RELEASE', log_h, count=1)

            if prj.name == 'Game16':
                fp = os.path.join(prj.build, self._AndroidManifest)
                print('edit:', fp, 'android.uid.system')
                edit('\sandroid:versionName="(\d+\.\d+)"\s'
                        , ' android:versionName="\\1" android:sharedUserId="android.uid.system" '
                        , fp, count=1)
                #subprocess.check_call(command('cd mt6580 && git pull'), shell=True, executable='/bin/bash')

            if prj.name == 'Game14':
                for fp in glob.glob(os.path.join(prj.build, 'doc/*.xls')):
                    print('copy:', fp)
                    shutil.copy(fp, '/samba/release1/doc/')
                with open('svn.log.{}.{}'.format(prj.name,prj.ver()), 'w') as f:
                    bash_command('svn log -r{}:HEAD {}'.format(prj.svnrev(old=1), prj.src), stdout=f)
                    print(prj.fullver()
                            , '%s => %s' % (prj.svnrev(old=1),prj.svnrev())
                            , '%s => %s' % (prj.ver(old=1),prj.ver()), file=f)
                    print('$ vim', os.path.join(self.SRC,'Game14/doc/版本发布记录.txt'), f.name)

            self.version_set(os.path.join(prj.build,prj._AppConfig), prj.ver(), prj.svnrev())

        for prj in self.projects:
            prebuild_apk_(self, prj)
        print()
        self.show_info(*args, **kvargs)

    def version_set(self, appconfig, ver, svnrev):
        lines = []
        with open(appconfig) as sf:
            lines = sf.readlines()

        re_ver = re.compile('\spublic\s.*\sString\s+VERSION\s*=\s*"v\d+\.\d+\.\d+(-r\d+)?"')
        re_svnrev = re.compile('\spublic\s.*\sString\s+SVNVERSION\s*=\s*"new-svn\d+"')
        with open(appconfig, 'w') as outf:
            def repf(r):
                if 'SVNVERSION' in r.group(0):
                    return re.sub('=\s*"new-svn\d+"', '= "new-svn{}"'.format(svnrev), r.group(0))
                if self.VARIANT == 'release':
                    return re.sub('=\s*"v[^"]+"', '= "v{}"'.format(ver), r.group(0))
                return re.sub('=\s*"v[^"]+"', '= "v{}-{}"'.format(ver, svnrev), r.group(0))
            for line in lines:
                lin = re.sub(re_ver, repf, line)
                if lin is line:
                    lin = re.sub(re_svnrev, repf, line)
                if not (lin is line):
                    print('edit:', appconfig, re.search('(\w+)\s*=\s*"([^"]+)', lin).groups())
                outf.write(lin)

    def postbuild_apk(self, *args, RARPWD=None, **kvargs):
        if self.VARIANT == 'test':
            return

        depfiles = []
        for prj in self.projects:
            depfiles += prj.depfiles
        print('wait:', *depfiles)
        while True:
            if sum(os.path.exists(x) for x in depfiles) == len(depfiles):
                break
            time.sleep(3)
        time.sleep(4)

        plts_excl_g500 = []

        for prj in self.projects:
            prj.make_outdir_tree()

            plts_excl_g500 += [ x for x in prj.plats if x != 'g500' ]

        if plts_excl_g500:
            pass #TODO: sync-up

        #for prj in self.projects:
        #    out = makedirs('out',prj.fullver(), remove=1)

        #    fp0 = os.path.join(self.BUILD,prj.name,prj.fullver()+'.apk')
        #    fp1 = os.path.join(out,'Game.apk')
        #    print('copyfile:', fp0, fp1)
        #    shutil.copyfile(fp0, fp1)
        #    for fp0 in 'libs/armeabi-v7a/libBarcode.so', 'libmtkhw.so':
        #        fp0 = os.path.join(self.BUILD,prj.name,fp0)
        #        print('copy2:', fp0, out)
        #        shutil.copy(fp0, out)

    def prebuild(self, *args, RARPWD=None, **kvargs):
        assert self.VARIANT == 'release'

        #self.postbuild_apk(*args, **kvargs)

        for prj in self.projects:
            #src = os.path.join('out',prj.fullver())
            #assert os.path.exists(src)
            #tmpdir = os.path.join('/tmp', prj.ver2())
            #shutil.rmtree(tmpdir, ignore_errors=True )
            for plt in prj.plats:
                if plt == 'g500':
                    bash_command('cd mt6580 && git pull')
                    out = 'mt6580/alps' #'/packages/apps/Game/'
                    for sf in prj.outfiles: #'libBarcode.so', 'libmtkhw.so', 'Game.apk':
                        pf = sf.replace(prj.outdir, '').strip('/')
                        df = os.path.join(out, pf)
                        copyfile(sf, df, makedirs=1)
                else:
                    pass
                    #libdir = makedirs(tmpdir, plt, 'vendor/g368_noain_t300/application','lib', remove=1)
                    #appdir = makedirs(tmpdir, plt, 'vendor/g368_noain_t300/application','internal', remove=1)
                    #for fp0 in prj.outfiles: #'libBarcode.so', 'libmtkhw.so':
                    #    out = libdir
                    #    if fp0.endswith('.apk'):
                    #        out = appdir
                    #    print('copy2:', fp0, '\t', out)
                    #    shutil.copy(fp0, out)
                    ##out = makedirs(tmpdir, plt, 'vendor/g368_noain_t300/application','internal', remove=1)
                    ##fp0 = os.path.join(src,'Game.apk')
                    ##print('copy2:', fp0, '\t', out)
                    ##shutil.copy(fp0, out)

    def build(self, *args, **kvargs):
        assert self.VARIANT == 'release'
        #self.prebuild(*args, **kvargs)

        prj2 = None
        for prj in self.projects:
            for plt in prj.plats:
                print('>>>', plt, prj)
                if plt == 'g500':
                    bash_command('cd mt6580/alps'
                            ' && source build/envsetup.sh && lunch full_ckt6580_we_l-user'
                            ' && make -j8'
                            ' && mt6580-copyout.sh /samba/release1/{}'
                            .format(prj.platver(plt)))
                    #if RARPWD:
                    #    self._make_archive(plt, prj, RARPWD)
                else:
                    prj2 = prj
        if prj2 and prj2.plats:
            bash_command('cd {} && make -f Game14.mk PLATS={} release'
                .format(self.BUILD, ','.join(prj2.plats)))
            #if RARPWD:
            #    for plt in prj2.plats:
            #        self._make_archive(plt, prj, RARPWD)

    def postbuild(self, *args, RARPWD=None, **kvargs):
        # TODO: sync-down
        if RARPWD:
            for prj in self.projects:
                for plt in prj.plats:
                    self._make_archive(plt, prj, RARPWD)

    def _make_archive(self, plt, prj, rarpwd):
        bash_command('cd /samba/release1'
                ' && ( rm -f {0}.rar ; rar a -hp{1} {0}.rar /samba/release1/{0} )'
                .format(prj.platver(plt), rarpwd))

    def rar(self, *args, RARPWD=None, **kvargs):
        assert RARPWD
        for prj in self.projects:
            for plt in prj.plats:
                self._make_archive(plt, prj, RARPWD)

    def sync_down(self, *args, **kvargs):
        for plt in self.PLATS:
            for prj in self.projects:
                if plt in prj.plats:
                    rel = '{}/{}-{}-{}'.format(self.VARIANT, plt, prj.ver(), prj.datestr)
                    plt,prj
        #rel="$plat-$NewVer-`datestr`"
        #rsync -vrL $rhost:$variant/$rel $outdir/ || die "$rhost $rel"

    def version_commit(self, *args, **kvargs):
        #@contextlib.contextmanager
        #def commit(self, **kvargs):
        #    yield
        #    for prj in self.projects:
        #        message="Version{ExtraVersionInfo}({OldVer}=>{NewVer}, {OldSVNRev}=>{NewSVNRev}) updated".format(**kvargs)
        #        subprocess.check_call(command('cd {} && svn commit -m"{}"', src, message)
        #                , shell=True, executable='/bin/bash')
        prjs = []
        def revert(self):
            for prj,msg in prjs:
                bash_command('cd {} && svn revert {}'.format(prj.src, prj._AppConfig))
        try:
            kvargs.setdefault('ExtraVersionInfo','')
            for prj in self.projects:
                d = prj.vars(**kvargs)
                bash_command('cd {} && svn diff --summarize'.format(prj.src))
                msg = "Version{ExtraVersionInfo}({OldVer}=>{NewVer}, {OldSVNRev}=>{NewSVNRev}) updated".format(**d)
                print(msg)
                yN = input('commit %s? (y/N): ' % prj.src)
                if yN.lower() not in ('y','yes'):
                    raise EOFError
                prjs.append( (prj,msg) )
            for prj,msg in prjs:
                self.version_set(os.path.join(prj.src,prj._AppConfig), prj.ver(), prj.svnrev())
                bash_command('cd {} && svn commit -m"{}"'.format(prj.src, msg))
        except (KeyboardInterrupt,EOFError):
            revert(self)
        except Exception:
            revert(self)
            raise

    def help(self, *args, **kvargs):
        print('''\
Usages:
    {0} prebuild_apk PLATS={sPLATS} VARIANT=[release|test]
    {0} build   PLATS={sPLATS} VARIANT=[release|test] RARPWD=XXX
    {0} version_commit
'''.format(sys.argv[0], sPLATS=','.join(Main.PLATS), **vars(self)))
        self.show_info(*args, **kvargs)

    def show_info(self, *args, **kvargs):
        pprint(vars(self))
        if args: pprint(args)
        if kvargs: pprint(kvargs)
        print()
        for s in grep('Key.*word', 'src/howto.txt'):
            print(s.strip())
        for prj in self.projects:
            apk = prj.export_filename.replace('/','\\')
            print(prj.svnrev(old=1), '=>', prj.svnrev() , prj.fullver(), apk)
            #pprint(vars(self)) #pprint(globals())

    def prepare_make(self, *args, RARPWD=None, **kvargs):
        assert self.VARIANT=='test' or RARPWD

        with open('Makefile','w') as mkfile:
            def simple_rule(target, deps, *cmds):
                args = sys.argv[:]
                print(target, ': ', ' '.join(deps), sep='', file=mkfile)
                for cmd in cmds:
                    args[1] = cmd
                    print('\t', ' '.join(args), sep='', file=mkfile)
                print(file=mkfile)
            print('###', *sys.argv, file=mkfile)
            print(file=mkfile)
            simple_rule('help', [], 'help')
            simple_rule('prebuild_apk', [], 'prebuild_apk')

            if self.VARIANT == 'test':
                return

            for prj in self.projects:
                out = makedirs('out',prj.fullver(), remove=1)
                outfs = [ os.path.join(out,fp) for fp in ('Game.apk', 'libBarcode.so', 'libmtkhw.so') ]
            simple_rule('apk_and_libs', outfs, 'postbuild_apk')

            apks = []
            for prj in self.projects:
                if self.VARIANT == 'release':
                    apk = '{}/{}/{}.apk'.format(self.BUILD,prj.name, prj.fullver())
                else:
                    apk = 'test/{}.apk'.format(prj.fullver())
                apks.append( apk )

            simple_rule('postbuild_apk', apks , 'sleep V=5' , 'postbuild_apk')

            simple_rule('prebuild', ['postbuild_apk'], 'prebuild')
            simple_rule('build', ['prebuild'], 'build')
            simple_rule('postbuild', ['build'], 'postbuild')
            simple_rule('version_commit', [], 'version_commit')
            for apk in apks:
                print(apk, ':', sep='', file=mkfile)
                print('\t', '@while ! /bin/ls -hl $@ 2>/dev/null; do sleep 3; done', sep='', file=mkfile)
                print(file=mkfile)
            print('.PHONY:', 'default', 'all', 'help', 'prebuild_apk', 'postbuild_apk', 'prebuild', 'build', 'postbuild', file=mkfile)
            print(file=mkfile)

            #rels = []
            #for prj in self.projects:
            #    for plt in prj.plats:
            #        rels.append('/samba/release1/{0}'.format(prj.platver(plt)))
            #        simple_rule(rel, ['postbuild'], rels)
            #        print(rel, ':', sep='', file=mkfile)
            #        print('\t', '@while ! /bin/ls -hl $@ 2>/dev/null; do sleep 3; done', sep='', file=mkfile)
            #        print(file=mkfile)
            #simple_rule('all', rels)

        bash_command('make help')
        #bash_command('make prebuild_apk && make postbuild')

    def prepare_make2(self, *args, RARPWD=None, **kvargs):
        assert self.VARIANT=='test' or RARPWD

        with open('Makefile','w') as mkfile:
            def simple_rule(target, deps, *cmds):
                args = sys.argv[:]
                print(target, ': ', ' '.join(deps), sep='', file=mkfile)
                for cmd in cmds:
                    args[1] = cmd
                    print('\t', ' '.join(args), sep='', file=mkfile)
                print(file=mkfile)
            print('###', *sys.argv, file=mkfile)
            print(file=mkfile)

            apks = []
            for prj in self.projects:
                if self.VARIANT == 'release':
                    apk = '{}/{}/{}.apk'.format(self.BUILD,prj.name, prj.fullver())
                else:
                    apk = 'test/{}.apk'.format(prj.fullver())
                apks.append( apk )

            simple_rule('help', [], 'help')
            simple_rule('prebuild_apk', [], 'prebuild_apk')
            simple_rule('postbuild_apk', apks , 'sleep V=5' , 'postbuild_apk')

            simple_rule('prebuild', ['postbuild_apk'], 'prebuild')
            simple_rule('build', ['prebuild'], 'build')
            simple_rule('postbuild', ['build'], 'postbuild')
            simple_rule('version_commit', [], 'version_commit')
            for apk in apks:
                print(apk, ':', sep='', file=mkfile)
                print('\t', '@while ! /bin/ls -hl $@ 2>/dev/null; do sleep 3; done', sep='', file=mkfile)
                print(file=mkfile)
            print('.PHONY:', 'default', 'all', 'help', 'prebuild_apk', 'postbuild_apk', 'prebuild', 'build', 'postbuild', file=mkfile)
            print(file=mkfile)

            #rels = []
            #for prj in self.projects:
            #    for plt in prj.plats:
            #        rels.append('/samba/release1/{0}'.format(prj.platver(plt)))
            #        simple_rule(rel, ['postbuild'], rels)
            #        print(rel, ':', sep='', file=mkfile)
            #        print('\t', '@while ! /bin/ls -hl $@ 2>/dev/null; do sleep 3; done', sep='', file=mkfile)
            #        print(file=mkfile)
            #simple_rule('all', rels)

        bash_command('make help')
        #bash_command('make prebuild_apk && make postbuild')

    def sleep(self, *args, V=4, **kvargs):
        time.sleep(int(V))

def check(*args, **kvargs):
    for x in ('src/Game14/.svn', 'src/Game16/.svn'
            , 'src/tools/CryptoRelease.bat' , 'src/howto.txt'
            , 'build/Game14.mk'
            , 'mt6580'):
        assert os.path.exists(x), x + ' not exist'

def makedirs(*d, remove=False, **kwargs):
    di = os.path.join(*d)
    if remove and os.path.exists(di):
        print('rmtree:', di)
        shutil.rmtree(di, ignore_errors=True ) # os.removedirs(di)
    os.makedirs(di)
    return di

def copyfile(sf, df, *args, makedirs=1, **kwargs):
    d = os.path.dirname(df)
    if not os.path.exists(d):
        os.makedirs(d) #(, exist_ok=True)
    print('copyfile:', sf, df)
    shutil.copyfile(sf, df)

def copyfiles2(self, out, *files, makedirs=1, remove=0, **kwargs):
    if os.path.exists(out):
        if remove:
            print('rmtree:', out)
            shutil.rmtree(out, ignore_errors=True )
    for sf in files:
        copyfile(sf, out, makedirs=makedirs)

def copytree(src, dst, remove=False, ignore=[], **kwargs):
    if remove and os.path.exists(dst):
        print('rmtree:', dst)
        shutil.rmtree(dst, ignore_errors=True)
    print('copytree:', src, dst)
    if not callable(ignore):
        ignore_ = ignore
        ignore = lambda d,names: ignore_
    shutil.copytree(src, dst, ignore=ignore)
    #if not os.path.exists(outdir):
    #    os.makedirs(outdir, exist_ok=True)

def waitfiles(*files, **kwargs):
    def sizes():
        return ( os.stat(f).st_size for f in files )
    while not _Stopped:
        print('waiting', *files)
        while not _Stopped:
            if sum(os.path.exists(x) for x in files) == len(files):
                break
            time.sleep(2)
        else: break
        ss = sizes()
        time.sleep(6)
        ss2 = sizes()
        if ss2 == ss:
            break
        ss = ss2

def walk(top, name):
    for basedir, dirs, files in os.walk(top):
        for x in fnmatch.filter(dirs, name):
            dirs.remove(x)
            yield (basedir,x)
        for x in fnmatch.filter(files, name):
            yield (basedir,x)

#def command(s, *args, **kv):
#    cmd = s.format(*args, **kv)
#    #print(cmd)
#    return cmd
def bash_command(cmd, shell=True,executable='/bin/bash',**kv):
    print(cmd)
    return subprocess.check_call(cmd, shell=shell, executable=executable, **kv)

def etree_replace_text(filename, path, text):
    from xml.etree.ElementTree import ElementTree
    tree = ElementTree(file=filename)
    node = tree.find(path)
    if node != None:
        node.text = text
        tree.write(filename, encoding='UTF-8', xml_declaration=True) #(, short_empty_elements=False)

def edit(expr, ss, *files, count=-1):
    for textf in files:
        lines = []
        with open(textf) as sf:
            lines = sf.readlines()
        with open(textf, 'w') as outf:
            for line in lines:
                if count > 0:
                    l, line = line, re.sub(expr, ss, line)
                    if not (l is line):
                        count -= 1
                outf.write( line )

def grep(expr, *files, filt=None):
    try:
        for textf in files:
            with open(textf) as sf:
                for line in sf:
                    res = re.search(expr, line)
                    if res:
                        if filt: line = filt(line, res)
                        if line:
                            yield line
    except IOError as e:
        print(textf, e, file=sys.stderr)
        raise

def _object(attr):
    if isinstance(attr, dict):
        return type('_', (object,), dict( (x,_object(y)) for x,y in attr.items()))
    if isinstance(attr, (tuple, list, set, frozenset)):
        return type(attr)(_object(x) for x in attr)
    return attr

def bootstrap(*xfs):
    import signal
    def _sig_handler(signal, frame):
        global _Stopped
        _Stopped = 1
    signal.signal(signal.SIGINT, _sig_handler)
    _this_module = sys.modules[__name__]

    def _fn_lis_dic(args):
        fn, lis, dic = '', [], {} # defaultdict(list)
        for a in args:
            if a.startswith('-'):
                assert ( '=' in a )
                a = a.strip('-')
            if '=' in a:
                k,v = a.split('=',1)
                v0 = dic.setdefault(k,v)
                if v0 is not v:
                    if type(v0) == list:
                        v0.append(v)
                    else:
                        dic[k] = [v0, v]
            else:
                if not fn:
                    fn = a
                else:
                    lis.append(a)
        global _FUNC
        _FUNC = fn
        return fn.split('.'), lis, dic

    global _arg_lis, _arg_dic
    syms, _arg_lis, _arg_dic = _fn_lis_dic(sys.argv[1:])
    for xf in xfs:
        xf(*_arg_lis, **_arg_dic) #setattr(_this_module, name, Type(*_arg_lis, **_arg_dic))

    a_lis, a_dic = _arg_lis[:], _arg_dic.copy()
    #print(a_dic, *a_lis)

    def _getattr(scope, sym):
        obj = getattr(scope, sym, None)
        if not obj and scope == _this_module:
            Main = getattr(scope,'Main',None)
            if Main:
                return getattr(Main(a_lis,a_dic), sym, None)
        return obj

    def _fn(Cobj, sym, *symbs):
        Cobj = _getattr(Cobj, sym)
        if symbs:
            #print(sym, type(Cobj), Cobj is Apk)
            #print(*symbs)
            return _fn(Cobj(a_lis, a_dic), *symbs)
        return Cobj

    t = timeit.default_timer()
    _fn(_this_module, *syms)(*a_lis, **a_dic)
    #print(a_dic, *a_lis)
    sys.stdout.flush()
    m,s = divmod(timeit.default_timer() - t, 60)
    print('time({}): {}m{}s'.format(_FUNC, int(m), int(s)), file=sys.stderr)

if __name__ == '__main__':
    try:
        _Stopped = 0
        bootstrap()
    except Exception as e:
        #print(e, file=sys.stderr)
        raise

    #import argparse

    #parser = argparse.ArgumentParser()
    #subparsers = parser.add_subparsers()

    #hello_parser = subparsers.add_parser('hello')
    #hello_parser.add_argument('name')
    ## add greeting option w/ default
    #hello_parser.add_argument('--greeting', default='Hello')
    ## add a flag (default=False)
    #hello_parser.add_argument('--caps', action='store_true')
    #hello_parser.set_defaults(func=greet)

    #goodbye_parser = subparsers.add_parser('goodbye')

