#!/usr/bin/env python3
import sys
from itertools import combinations

add = lambda x,y: x+y ; add.__name__ = '+' #lambda x,y: '{}+{}'.format(x,y)
sub = lambda x,y: x-y ; sub.__name__ = '-' #lambda x,y: '{}-{}'.format(x,y)
mul = lambda x,y: x*y ; mul.__name__ = '*' #lambda x,y: '{}*{}'.format(x,y)
def div(x,y): #div = lambda x,y: x/y
    if y==0: return None
    return x/y
div.__name__ = '/' #lambda x,y: '{}/{}'.format(x,y)

def walk(lis):
    if len(lis) == 1:
        z, e = lis[0]
        if z == 24:
            #print(e)
            def e_str(z,f,x,y):
                def _str(o):
                    if type(o) == int:
                        return str(o) # '% 2d' % o
                    return '(' + e_str(*o) + ')'
                return ' '.join([_str(x), f.__name__, _str(y)])
            print( e_str(*e), '=', z )
        return
    ####
    dups = set()
    for (x,xe),(y,ye) in combinations(lis, 2):
        if (x,y) in dups:
            continue
        dups.add((x,y))
        li = lis[:]
        li.remove((x,xe)) ; li.remove((y,ye))
        for f in add,sub,mul,div:
            z = f(x,y) ; e = (z,f,xe,ye)
            if z != None:
                walk([(z,e)] + li)

            if f(y,x) == f(x,y):
                continue
            y,ye, x,xe = x,xe, y,ye

            z = f(x,y) ; e = (z,f,xe,ye)
            if z != None:
                walk([(z,e)] + li)

lis = [ (int(x),int(x)) for x in sys.argv[1:5] ]
#lis.sort()
walk(lis)

# import fractions
# print( fractions.Fraction(2,4) )

