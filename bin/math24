#!/usr/bin/env python3
import sys
from itertools import combinations

add = lambda x,y: x+y ; add.__name__ = '+' #lambda x,y: '{}+{}'.format(x,y)
sub = lambda x,y: x-y ; sub.__name__ = '-' #lambda x,y: '{}-{}'.format(x,y)
mul = lambda x,y: x*y ; mul.__name__ = '*' #lambda x,y: '{}*{}'.format(x,y)
def div(x,y): #div = lambda x,y: x/y
    if y==0: return None
    return x/y
div.__name__ = '/' #lambda x,y: '{}/{}'.format(x,y)

def walk(lv, lis, exr):
    if not lis or lis[0] is None:
        return
    if len(lis) == 1:
        if lis[0] == 24:
            def echo_r(lv, t, xt):
                if xt:
                    echo_r(lv+1, *xt)
                f,x,y = t
                print('(', x, f.__name__, y, ')', sep='', end=' ')
            echo_r(0, *exr)
            print()
        return
    dups = set()
    for x,y in combinations(lis, 2):
        if (x,y) in dups:
            continue
        dups.add((x,y))
        li = lis[:]
        li.remove(x) ; li.remove(y)
        for f in add,sub,mul,div:
            z, r = f(x,y), (f,x,y)
            walk(lv+1, [z] + li, (r, exr))
            if f(y,x) == f(x,y):
                continue
            y, x = x, y
            z, r = f(x,y), (f,x,y)
            walk(lv+1, [z] + li, (r, exr))

walk(0, [ int(x) for x in sys.argv[1:5] ], ())

# import fractions
# print( fractions.Fraction(2,4) )

