
[config]
min_version = "0.32.1"
#default_to_workspace = false

[config.modify_core_tasks]
private = true
namespace = "default"

[env]
CARGO_MAKE_PROFILE="production"
RUST_RECURSION_COUNT = "0"
ENV_DIR = {source="${CARGO_MAKE_PROFILE}", default_value = "debug", mapping = {production = "release"}}
TARGET_DIR = {value = "target", condition = {env_not_set = ["CARGO_TARGET_DIR"]}}
BIN_DIR = "${TARGET_DIR}/${CARGO_MAKE_RUST_TARGET_TRIPLE}/${ENV_DIR}"
WASM_PATH = "${BIN_DIR}/${CARGO_MAKE_CRATE_NAME}.wasm"
#CARGO_PROFILE = "dev"
#TARGET_DIR = "target"
MANIFEST_DIR = "${CARGO_MAKE_WORKING_DIRECTORY}"

[env.production]
CARGO_RELEASE_ARGS = "--release"
MY_FOO = "--prod"
[env.development]
MY_FOO = "--dev"

[tasks.echo-development]
condition = { profiles = [ "development" ] }
command = "date"
[tasks.echo-production]
condition = { profiles = [ "production" ] }
command = "date"

[tasks.show-env]
command = "env"
[tasks.bash-env]
script = """#!/bin/bash -c env"""
[tasks.rust-env]
script_runner = "@rust"
script = ["""
fn main() {
    for (key, value) in std::env::vars() {
        println!("{}: {}", key, value);
    }
}
"""]

[tasks.watch-args-example]
command = "echo"
args = [ "Triggered by watch" ]
watch = { postpone = true, no_git_ignore = true, ignore_pattern = "examples/files/*", watch = ["./docs/"] }

[tasks.basic-http-server]
install_crate = {crate_name = "basic-http-server", binary = "basic-http-server", test_arg="--help"}

[tasks.wasm-bindgen-cli]
install_crate = {crate_name = "wasm-bindgen-cli", binary = "wasm-bindgen", test_arg="--help"}

[tasks.cargo-build-web]
args = ["build", "--target", "wasm32-unknown-unknown", "--features", "web", "@@split(CARGO_RELEASE_ARGS, )"]
command = "cargo"

[tasks.build-wasm]
args = ["--out-dir", "${TARGET_DIR}", "--out-name", "wasm", "--target", "web", "--no-typescript", "${WASM_PATH}"]
command = "wasm-bindgen"
dependencies = ["cargo-build-web", "wasm-bindgen-cli"]

[tasks.build-wasm-bundled]
args = ["--out-dir", "${TARGET_DIR}", "--out-name", "wasm", "--target", "bundler", "--no-typescript", "${WASM_PATH}"]
command = "wasm-bindgen"
dependencies = ["cargo-build-web", "wasm-bindgen-cli"]

[tasks.build-native]
args = ["build", "--features", "native", "@@split(CARGO_RELEASE_ARGS, )"]
command = "cargo"

[tasks.run]
command = "${TARGET_DIR}/${ENV_DIR}/${CARGO_MAKE_BINARY_EXECUTABLE_NAME}"
dependencies = ["build-native"]

[tasks.wasm-serve]
command = "basic-http-server"
args = ["-x"]
dependencies = ["build-wasm", "basic-http-server"]

[tasks.test]
disabled = true

[tasks.default]
dependencies = [ "echo1", "ls" ] # ["build", "build_examples"]
#dependencies = [ "build" , "copy-dlls" ]
script_runner = "@duckscript"
script = '''
pwd
cd rust
pwd
cm_run_task rust-env
'''
# cargo make --disable-check-for-updates --cwd rust --makefile ../Makefile.toml  rust-env


[tasks.all]
description = "Build Seed and examples"
dependencies = [] # ["build", "build_examples"]

[tasks.build]
description = "cargo +nightly -Z unstable-options build --out-dir ..."
command = "cargo"
args = ["+nightly", "-Z","unstable-options", "build", "--out-dir", "lib/${CARGO_MAKE_RUST_TARGET_TRIPLE}"]

[tasks.build_release]
extend = "build"
description = "Build only Seed in relase mode"
args = ["build", "--release"]

[tasks.start]
description = "Start chosen example. Ex: 'cargo make start counter'"
command = "cargo"
args = ["make", "--cwd", "./examples/${@}", "start"]

[tasks.start_release]
extend = "start"
description = "Start chosen example in release mode. Ex: 'cargo make start counter'"
args = ["make", "--cwd", "./examples/${@}", "start_release"]

[tasks.start_server]
description = "Start server of chosen example (only a few have one). Ex: 'cargo make start_server websocket'"
command = "cargo"
args = ["make", "--cwd", "./examples/${@}", "start_server"]

[tasks.start_server_release]
extend = "start_server"
description = "Start server of chosen example (only a few have one) in release mode. Ex: 'cargo make start_server websocket'"
args = ["make", "--cwd", "./examples/${@}", "start_server_release"]

[tasks.default_build]
description = "Build with wasm-pack"
command = "wasm-pack"
args = ["build", "--target", "web", "--out-name", "package", "--dev"]
dependencies = ["default::install-wasm-pack"]

[tasks.default_build_release]
extend = "default_build"
description = "Build with wasm-pack in release mode"
args = ["build", "--target", "web", "--out-name", "package", "--release"]

[tasks.default_start]
description = "Build and start microserver"
install_crate = { crate_name = "microserver", binary = "microserver", test_arg = "-h" }
command = "microserver"
args = ["--port", "8000"]
dependencies = ["build"]

[tasks.default_start_release]
extend = "default_start"
description = "Build and start microserver in release mode"
dependencies = ["build_release"]

[tasks.hello-world-from-script-file-absolute-path]
script = { file = "${CARGO_MAKE_WORKING_DIRECTORY}/script.sh", absolute_path = true }

##############################################################
[tasks.duckscript-example]
script_runner = "@duckscript"
script = [
'''
task_name = get_env CARGO_MAKE_CURRENT_TASK_NAME
echo The currently running cargo make task is: ${task_name}

# since all env vars are auto loaded as duckscript variables by cargo-make
# you can access them directly
echo The currently running cargo make task is: ${CARGO_MAKE_CURRENT_TASK_NAME}

cd .. # this changes cargo-make current working directory (cargo-make will revert to original directory after script execution)
pwd
set_env CARGO_MAKE_CURRENT_TASK_NAME tricking_cargo_make
'''
]

[tasks.run-task-from-duckscript]
script_runner = "@duckscript"
script = [
'''
echo first invocation of echo1 task:
cm_run_task echo1
echo second invocation of echo1 task:
cm_run_task echo1

echo running task: echo2:
cm_run_task echo2
'''
]

[tasks.echo1]
command = "echo"
args = ["arg1", "arg2"]

[tasks.rust-script]
# env = { "CARGO_MAKE_RUST_SCRIPT_PROVIDER" = "rust-script" } # @rust default
script_runner = "@rust"
script = ["""
//! ```cargo
//! [dependencies]
//! envmnt = "*"
//! ```
fn main() {
    let value = envmnt::get_or("PATH", "NO PATH VAR DEFINED");
    println!("Path Value: {}", &value);
}
"""
]

[tasks.varargs]
# script_runner = "@duckscript"
command = "echo"
args = [ "args are:", "-o=${@}" ]

[tasks.ls]
script_runner = "@duckscript"
script = '''ls '''

[tasks.shell-rg]
script_runner = "@shell"
script = ['''
rg -uw setTimeout src
rg -uw onRespawn src
'''
]

[tasks.ftp-mount]
script = """#!/bin/sudo /bin/bash
cd /home/ftp
echo "$SHELL `pwd` `id` $LOGNAME "
for x in `/bin/find ???* -prune -type d` ; do
    src=`/bin/find ../library/* -prune -type d -name "$x*"`
    echo "mount -o bind $src $x"
    [ -d "$x" -a -d "$src" ] || continue
    mount -o bind "$src" "$x"
done
"""
[tasks.ftp-umount]
script = """#!/bin/sudo /bin/bash
cd /home/ftp
for x in `/bin/find ???* -prune -type d` ; do
    umount "$x"
done
"""

[tasks.exdeps]
script_runner = "python"
script_extension = "py"
script = ["""
import subprocess, shlex, tempfile

def popen(cmd, stdin=None):
    return subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE, stdin=stdin, encoding='utf-8')

with popen('''rg -u '^import' src''') as xp1:
    with popen('''tee all-imports''', stdin=xp1.stdout) as xp2:
        #tmpf = io.StringIO()
        with tempfile.TemporaryFile(mode='w+t') as tmpf:
            for line in xp2.stdout:
                line = line.strip().replace('"', "'")
                if "'" in line:
                    _, d, _ = line.split("'", 2)
                    if not d.startswith("."):
                        print(f"{d}\t{line}", file=tmpf)
            tmpf.seek(0)
            with popen('''awk '{print $1}' ''', stdin=tmpf) as xp3:
                with popen('''sort ''', stdin=xp3.stdout) as xp4:
                    with popen('''uniq ''', stdin=xp4.stdout) as xp5:
                        for line in xp5.stdout:
                            print(line.strip())
"""
]

[tasks.merge-1]
script_runner = "@duckscript"
script = ['''
# set_env SPRITES_LIST ${@}
echo SPRITES_LIST: ${SPRITES_LIST}
pwd
cm_run_task merge-v1
'''
]
## cargo make merge-1 -e SPRITES_LIST=..\imgs\tesla\tesla1.txt -e OUTFILE=tesla.png
## cargo run --bin list -- tella | python merge-v.py tmp.png
[tasks.merge-v1]
description = "Populate styles"
script_runner = "python"
script_extension = "py"
env = { STYLES_ENDPOINT = "css_properties.json", STYLE_NAMES_FILE = "styles/style_names.rs" }
script = [
'''
import sys, os
import numpy as np
from PIL import Image

def merge(images, outfile):
    min_img_shape = sorted([(np.sum(i.size), i.size) for i in images])[0][1]
    img_merge = np.vstack(
        (np.asarray(i.resize(min_img_shape, Image.ANTIALIAS)) for i in images))
    img_merge = Image.fromarray(img_merge)
    img_merge.save(outfile)

def images(images, basedir):
    images = filter(lambda e:e, map(str.strip, images) )
    images = list(images)
    print(images, sep='\n') #; sys.exit(0)
    return [ Image.open( os.path.join(basedir, it.replace('\\','/')) ) for it in images ]

def envargs():
	# return sys.stdin, "."
	infile = os.getenv("SPRITES_LIST")
	assert infile, "-e SPRITES_LIST=..."
	outfile = os.getenv("OUTFILE", infile+".png") #os.path.splitext(infile)[0] + ".png"
	return open(infile), os.path.dirname(infile), outfile

#print(os.getcwd(), "${STYLES_ENDPOINT}")
infile, basedir, outfile = envargs()
images = images(infile, basedir)
merge(images, outfile)

'''
]

#$ cat filelist.txt
# file 1.mp3
# file 2.mp3
# file 3.mp3
#
#ffmpeg-concat:
#	ffmpeg -f concat -i filelist.txt -c copy output.mp3

[tasks.ffmpeg-concat]
description = "ffmpeg concat"
script_runner = "python"
script_extension = "py"
env = { INLIS = "input.txt", OUTPUT = "output" }
script = ['''
import sys, os

def convert(infilename, outfilename):
	with open(infilename) as f:
		fs = filter(lambda e:e, map(str.strip, f) )
		fs = list(fs)
		print(*fs, sep='\n') #; sys.exit(0)
		_, ext = os.path.splitext(fs[0])
		lis = []
		for i,f in enumerate(fs):
			lis.append(f"{i}{ext}")
			os.link(f, os.path.join("tmp",lis[-1]))
		xfn = "tmp/input-files.txt" #os.path.join("tmp", infilename)
		with open(xfn, "w") as xf:
			print( *map(lambda p: f"file {p}", lis), sep="\n", file=xf)
			return xfn, f"{outfilename}{ext}"
		#return [ Image.open( os.path.join(basedir, it.replace('\\','/')) ) for it in images ]

def main(infilename, outfilename):
	infilename, outfilename = convert(infilename, outfilename)
	print(f"ffmpeg -f concat -i {infilename} -c copy {outfilename}")
	os.system(f"ffmpeg -f concat -i {infilename} -c copy {outfilename}")

ifn = os.getenv("INLIS")
ofn = os.getenv("OUTPUT")
assert os.path.exists(ifn) and ofn, f"{ifn} {ofn}\n\tcargo make ffmpeg-concat -e INLIS=... -e OUTPUT=...\n"
main(ifn, ofn)

'''
]

[tasks.copy-yew-static-to-dist]
command = "cargo"
args = ["make", "recur-tree-copy_rs", "src-yew/static", "dist" ]

[tasks.recur-tree-copy_rs]
###https://github.com/sagiegurari/cargo-make/tree/0.12.0#usage-task-command-script-task-examplerust
#env = { CARGO_MAKE_RUST_SCRIPT_PROVIDER = "rust-script" }
script_runner = "@rust"
script_extension = "rs"
script = ["""#[allow(non_snake_case)]
use std::fs;
use std::path::{Path, PathBuf};

fn main() -> std::io::Result<()> {
    let mut args = std::env::args_os().skip(1).map(PathBuf::from);
    let src = args.next().expect("... <src> <dest>"); //Path::new(&arg1);
    let mut dest = args.next().expect("... <src> <dest>"); // PathBuf::from(&arg2);

    if !src.exists() {
        panic!("not exists: {}", src.display());
    }
    safe_check(src.canonicalize()?, dest.canonicalize()?);

    if !arg1.ends_with("/") && arg2.ends_with("/") {
        dest.push(src.file_name().unwrap());
        fs::create_dir_all(&dest)?;
    }
    recur_copy_tree(src, dest)
}

fn recur_copy_tree(src_dir: &Path, dest_dir: PathBuf) -> std::io::Result<()> {
    for entry in fs::read_dir(src_dir)?.map(Result::unwrap) {
        let ft = entry.metadata()?.file_type();
        let path = entry.path();
        //println!("{:?} KB", dir.metadata()?.len() / 1000);
        let dest = dest_dir.join(path.file_name().unwrap());
        if ft.is_dir() || ft.is_file() {
            println!("{} -> {}", path.display(), dest.display());
            if ft.is_dir() {
                fs::create_dir_all(&dest)?;
                recur_copy_tree(&path, dest)?;
            } else {
                fs::copy(path, dest)?;
            }
        } else {
            eprintln!("!skipped {:?}: {}", ft, path.display(),);
        }
    }
    Ok(())
}

fn safe_check(src: PathBuf, dest: PathBuf) {
    println!("{} -> {}", src.display(), dest.display());
    if dest.starts_with(&src) {
        panic!("**dangerous**: `{}` '{}'", src.display(), dest.display());
    }
}
"""]

[tasks.copy-dlls]
#cp ./target/x86_64-pc-windows-msvc/release/*.dll ./lib/x86_64-pc-windows-msvc/
command = "cargo"
args = ["make", "copyfiles2", "${BIN_DIR}/*.dll", "lib/${CARGO_MAKE_RUST_TARGET_TRIPLE}" ]

[tasks.copyfiles2]
script_runner = "@rust"
script_extension = "rs"
script = ["""// cargo-deps: anyhow, glob
extern crate anyhow;
extern crate glob;
use anyhow::Result;
use std::path::{Path, PathBuf};

fn copy2<P: AsRef<Path>, S: AsRef<str>>(pat: S, dir: P) -> Result<()> {
    for entry in glob::glob(pat.as_ref())? {
        let path = entry?;
        let dest = dir.as_ref().join(path.file_name().unwrap());
        println!("{:?}", path.display()); // path.metadata()?.file_type();
        std::fs::copy(&path, &dest)?;
    }
    Ok(())
}

fn main() -> Result<()> {
    let mut args = std::env::args_os().skip(1);
    let pat = args.next().expect("... <pattern> <dest>");
    let dest = args
        .next()
        .map(PathBuf::from)
        .expect("... <pattern> <dest>"); //Path::new(&arg1);

    //safe_check(src.canonicalize()?, dest.canonicalize()?);
    copy2(pat.to_string_lossy(), dest)
}
"""]

[tasks.smb]
###https://github.com/sagiegurari/cargo-make/tree/0.12.0#usage-task-command-script-task-examplerust
script_runner = "@rust"
script_extension = "rs"
script = ["""
//! ```cargo
//! [dependencies]
//! regex = "*"
//! handlebars = "*"
//! serde_json = "*"
//! ```
extern crate handlebars;
extern crate regex;
extern crate serde_json;

use serde_json::json;
use std::fs;
use std::path::{Path, PathBuf};
//use regex::Regex; // https://docs.rs/regex/
type Result = std::result::Result<(), Box<dyn std::error::Error>>;

const RDONLY_TPLSTR: &'static str = r##"[{{short}}]
   comment = {{name}}
   path = {{full}}
   writable = no
   browseable = yes
   public = yes
   read only = yes
   only guest = yes
"##;

fn main() -> Result {
    let mut args = std::env::args_os().skip(1).map(PathBuf::from);
    let topdir = args.next().unwrap_or("/home/library".into());
    let cfghdr = topdir.join("smb.conf");
    let cfghdr = args.next().unwrap_or(cfghdr);

    if !topdir.exists() {
        panic!("not exists: {}", topdir.display());
    }

    let mut reg = handlebars::Handlebars::new();
    reg.register_template_string("ENTPL_A", RDONLY_TPLSTR)?;

    let mut hf = fs::File::open(cfghdr)?;
    std::io::copy(&mut hf, &mut std::io::stdout())?;

    list_entries(&topdir, |data| {
        if matches!(
            data["short"].as_str(),
            Some("Incoming") | Some("opt") | Some("lost") | Some("Library")
        ) {
            return Ok(());
        }
        reg.render_to_write("ENTPL_A", &data, std::io::stdout())
            .map_err(From::from)
    })
}

fn list_entries<F: Fn(&'_ serde_json::Value) -> Result>(src_dir: &Path, f: F) -> Result {
    let regex = regex::Regex::new("^([A-Za-z][0-9A-Za-z_.]+[0-9A-Za-z])").unwrap();
    for entry in fs::read_dir(src_dir)?.map(std::result::Result::unwrap) {
        let ft = entry.metadata()?.file_type();
        let path = entry.path();
        if !ft.is_dir() {
            eprintln!("# skip {}: {:?}", path.display(), ft,);
            continue;
        }
        if let Some(fullpath) = path.to_str() {
            let filename = path.file_name().unwrap();
            let filename = filename.to_str().unwrap(); //.to_string_lossy(); // .trim_start_matches(char::is_numeric);
            if let Some(caps) = regex.captures(filename) {
                f(&json!({ "name": filename, "short": &caps[1], "full":fullpath }))?;
                //println!("{} => {}", filename, &caps[1]);
                continue;
            }
        }
        eprintln!("# unknown: {}", path.display(),);
    }
    Ok(())
}

"""]

