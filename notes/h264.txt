### http://gentlelogic.blogspot.com/2011/11/exploring-h264-part-2-h264-bitstream.html
    Exploring H.264. Part 2: H.264 Bitstream format 
    http://h264bitstream.sourceforge.net/
    http://cekirdek.pardus.org.tr/~ismail/ffmpeg-docs/h264_8c-source.html
    http://www.elecard.com/en/products/professional/analysis/stream-analyzer.html - this is not open source, but helps in h264 bitstream research
    http://aragorn.pb.bialystok.pl/~marekpk/papers/parfieniuk.09.ujt.final.pdf - some info about decoders


### http://stackoverflow.com/questions/5024114/suggested-compression-ratio-with-h-264
    [image width] x [image height] x [framerate] x [motion rank] x 0.07 = [desired bitrate]

>>> 640*480*24*2*0.07 /8.0/1024
126.00000000000001
>>> 1280*720*16*2*0.07 /8.0/1024
252.00000000000003
>>> 1280*720*24*2*0.07 /8.0/1024
378.00000000000006
>>> 1920*1080*16*2*0.07 /8.0/1024
567.0
>>> 1920*1080*24*2*0.07 /8.0/1024
850.5000000000001
>>>

###
https://en.wikipedia.org/wiki/Network_Abstraction_Layer
https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC

Single-time aggregation packet (STAP)
http://tools.ietf.org/html/rfc3984#section-5.7

Multi-time aggregation packet (MTAP): 

http://stackoverflow.com/questions/9618369/h-264-over-rtp-identify-sps-and-pps-frames
You should write SPS and PPS at the start of stream, and only when they change in the middle of stream.

SPS and PPS frames are packed in a STAP NAL unit (generally STAP-A) with NAL type 24 (STAP-A) or 25 (STAP-B) STAP format is described in RFC-3984 section 5.7.1

Don't rely on marker bit, use start bit and end bit in NAL header.

For fragmented video frames you should regenerate NAL unit using 3 NAL unit bits of first fragment (F, NRI) combined with 5 NAL type bits of first byte in payload (only for packets with start bit set to 1) check RFC-3984 section 5.8:



	   The FU indicator octet has the following format:
	
	      +---------------+
	      |0|1|2|3|4|5|6|7|
	      +-+-+-+-+-+-+-+-+
	      |F|NRI|  Type   |
	      +---------------+
	   The FU header has the following format:
	
	      +---------------+
	      |0|1|2|3|4|5|6|7|
	      +-+-+-+-+-+-+-+-+
	      |S|E|R|  Type   |
	      +---------------+

      Table 1.  Summary of NAL unit types and the corresponding packet
                types

      NAL Unit  Packet    Packet Type Name               Section
      Type      Type
      -------------------------------------------------------------
      0        reserved                                     -
      1-23     NAL unit  Single NAL unit packet             5.6
      24       STAP-A    Single-time aggregation packet     5.7.1
      25       STAP-B    Single-time aggregation packet     5.7.1
      26       MTAP16    Multi-time aggregation packet      5.7.2
      27       MTAP24    Multi-time aggregation packet      5.7.2
      28       FU-A      Fragmentation unit                 5.8
      29       FU-B      Fragmentation unit                 5.8
      30-31    reserved                                     -


https://sourceforge.net/projects/h264bitstream/

### https://cardinalpeak.com/blog/the-h-264-sequence-parameter-set/
    FFmpeg/ffmpeg -i vid_bigbuckbunny.mp4 -vcodec copy -vbsf h264_mp4toannexb -an vid_bigbuckbunny.h264


Sequence Parameter Set (SPS) and the Picture Parameter Set (PPS). 

SPS and PPS frames are packed in a STAP NAL unit (generally STAP-A) with NAL type 24 (STAP-A) or 25 (STAP-B) STAP format is described in RFC-3984 section 5.7.1

this is first two bytes of a FU-A payload (right after rtp header):

|  FU indicator |   FU header   |
+---------------+---------------+
|0|1|2|3|4|5|6|7|0|1|2|3|4|5|6|7|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|F|NRI|  Type   |S|E|R|  Type   |
+---------------+---------------+

to construct the NAL unit you should take "Type" from "FU Header" and "F" and "NRI" from "FU indicator"


   Figure 7 presents an example of an RTP packet that contains an STAP-
   A.  The STAP contains two single-time aggregation units, labeled as 1
   and 2 in the figure.

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                          RTP Header                           |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |STAP-A NAL HDR |         NALU 1 Size           | NALU 1 HDR    |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                         NALU 1 Data                           |
      :                                                               :
      +               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |               | NALU 2 Size                   | NALU 2 HDR    |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                         NALU 2 Data                           |
      :                                                               :
      |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                               :...OPTIONAL RTP padding        |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      Figure 7.  An example of an RTP packet including an STAP-A and two
                 single-time aggregation units


### http://blog.csdn.net/dxpqxb/article/details/7625652
    在H264协议里定义了三种帧，完整编码的帧叫I帧，参考之前的I帧生成的只包含差异部分编码的帧叫P帧，还有一种参考前后的帧编码的帧叫B帧。
    H264采用的核心算法是帧内压缩和帧间压缩，帧内压缩是生成I帧的算法，帧间压缩是生成B帧和P帧的算法。
    一个序列的第一个图像叫做 IDR 图像（立即刷新图像），IDR 图像都是 I 帧图像。H.264 引入 IDR 图像是为了解码的重同步，当解码器解码到 IDR 图像时，立即将参考帧队列清空，将已解码的数据全部输出或抛弃，重新查找参数集，开始一个新的序列

(1280x720) NAL Unit Type & frame size:
    type 1: m/a/n: 15026 3184 280
    type 5: m/a/n: 16869 14990 5
    type 7: m/a/n: 10 10 5
    type 8: m/a/n: 4 4 5
    ===
    type 1: m/a/n: 22048 8496 966
    type 5: m/a/n: 44350 28863 17
    type 7: m/a/n: 10 10 17
    type 8: m/a/n: 4 4 17
    ===

### .GOP=1
1920x1080 NAL Unit Type & frame size:
    NAL-Unit-Type 5: m/a/n: 26879 20095 231
    NAL-Unit-Type 7: m/a/n: 11 11 231
    NAL-Unit-Type 8: m/a/n: 4 4 231
    ===
1280x720 NAL Unit Type & frame size:
    NAL-Unit-Type 5: m/a/n: 26989 10606 461
    NAL-Unit-Type 7: m/a/n: 10 10 461
    NAL-Unit-Type 8: m/a/n: 4 4 461
    ===

### https://www.raspberrypi.org/forums/viewtopic.php?t=41053&p=334473#p334801
    The VUI bitstream restriction setting WORKS and now the Raspberry has zero latency decode. :mrgreen:

    bitstream_restriction_flag : 1
    motion_vectors_over_pic_boundaries_flag : 1
    max_bytes_per_pic_denom : 0
    max_bits_per_mb_denom : 0
    log2_max_mv_length_horizontal : 10
    log2_max_mv_length_vertical : 10
    num_reorder_frames : 0
    max_dec_frame_buffering : 1

    This technique may also work for other hardware that is experiencing similar startup delays...
    For future reference, since it was mentioned a few times, we are not using B frames in the stream.

    If you're going to write a VUI structure into the SPS at the decoder, you can't use a constant value for "max_dec_frame_buffering" - it has to be at least the value of "max_num_ref_frames" which is part of the standard SPS packet. I naively fixed this value at 1, but when a stream came in with more than 1 in max_num_ref_frames, all sort of interesting glitches started happening. Instead, set max_dec_frame_buffering in the VUI to the greater of 1 or max_num_ref_frames and you should be better off.

### https://software.intel.com/en-us/forums/intel-integrated-performance-primitives/topic/294840
    ... ...
    1. As suggested, do not use multi-threading in the decoder, as it adds to the frame buffering employed.
    2. The reason for suggesting to go with an as low as possible level (relative the picture resolution) is exactly because it influences the 'MaxDPBSize' parameter that thus sets the 'max_dec_frame_buffering' parameter when not present. If you would like to use a higher level (for other compression quality reasons), you would need to specify the 'max_dec_frame_buffering' directly in the VUI set.
    3. There might be a "bug" in the handling of the 'max_dec_frame_buffering' in the decoder for a value of 0 - and I also cannot remember if it handles the inferring of the value (when not present) correctly...

### http://ecereview.blogspot.com/2007/12/syntax-elements-of-h264.html
### http://ecereview.blogspot.com/search/label/Video
    - Syntax elements for NAL
    1). nal_ref_idc:
    For seq and pic parameter sets NAL, it shall be 1.
    For slices of reference pic, it shall be 1.
    For slices of non reference pic, it shall be 0.
    2). nal_unit_type:

    - Syntax elements for Seq Parameter Set (SPS)
    0) seq_parameter_set_id: [0, 31]
    1) log2_max_frame_num_minus4: [0, 12] (maximal num of MaxFrameNum is 2^16)
    2) pic_order_cnt_type: specify the method to decode picture order count. [0, 2]
    3) log2_max_pic_order_cnt_lsb_minus4: [0, 12] (MaxPicOrderCntLsb)
    4) several elements for the decoding of picture order count
    5) num_ref_frames: [0, MaxDpbSize], the sum of reference frames, complementary reference field pair and non-paired reference fields
    6) frame_mbs_only_flag: indicate only frames exist in the video seq
    7) mb_adaptive_frame_field_flag:

    - Syntax elements for Pic Parameter Set (PPS)
    0) pic_parameter_set_id: [0, 255]
    1) mb to slice group map
    2) QP initial value for Y/C

    - Syntax elements for Slice header
    0) first_mb_in_slice: MB index in general and MB pair index for MBAFF
    1) slice_type: IDR only contains I/SI slices and so does the video seq when num_ref_frames is 0
    2) frame_num: number reference pictures.
    3) field_pic_flag: this slice is one of a coded field, i.e. the picture is field picture. The picture structure could be defined with this flag. But if it is 0 the MB structure may be either frame or field.
    4) bottom_field_flag: this slice is part of a coded bottom field. The picture is bottom field.
    5) pic_order_cnt_lsb: the picture order count modulo MaxPicOrderCntLsb for the top field of a coded frame or for a coded field.
    6) delta_pic_order_cnt_bottom
    7) delta_pic_order_cnt[0-1]?
    8) idr_pic_id: identifies an IDR picture. All slices in one IDR have the same value of idr_pic_id.

    - Syntax elements for slice data
    0) mb_field_decoding_flag: identify if the current MB is field or frame structure in MBAFF mode 

###

