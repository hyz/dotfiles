
    git clone --depth 1 file:///$PWD ../myex`date +%y%m%d`

    https://github.com/search?l=Rust&q=stars%3A%3E1&s=stars&type=Repositories

    git clone --depth=1 ssh://192.168.9.24/xhome/flutter/samples/.git samples
    git remote get-url origin

    git status |rg modified |awk '{print $2}' |cpio -vpud tmp/

### branches

    git checkout -B XYZ
    git push -u origin XYZ

    git clone gitee-oopx:oopx/godot.git -b XYZ XYZ
    git checkout -b XYZ origin/XYZ

### /etc/hosts

https://github.com.ipaddress.com/
https://fastly.net.ipaddress.com/github.global.ssl.fastly.net

    140.82.114.3    github.com
    199.232.69.194  github.global.ssl.fastly.net

### .ssh/config

    Host git-oopx
        HostName git.oschina.net
        User git
        IdentityFile ~/.ssh/id_rsa-XXX
    $ ssh -vT git-oopx
    $ git clone git-oopx:oopx/test.git

### https://stackoverflow.com/questions/2100907/how-to-remove-delete-a-large-file-from-commit-history-in-git-repository

    git lola --name-status

    git filter-branch --prune-empty -d /dev/shm/scratch \
        --index-filter "git rm --cached -f --ignore-unmatch oops.iso" \
        --tag-name-filter cat -- --all

    git update-ref -d refs/original/refs/heads/master
    git reflog expire --expire=now --all
    git gc --prune=now

### https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch

In the simplest terms, git pull does a git fetch followed by a git merge.

### https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely

Note that in most cases the remote name is origin

    git push -d <remote_name> <branch_name> # remote_name = origin
    git branch -d <branch_name>

### https://stackoverflow.com/questions/348170/how-do-i-undo-git-add-before-commit

You can undo git add before commit with

    git rm --cached <file> # git reset <file>

### man git |grep GIT_SSH

### https://github.com/libgit2/pygit2
### https://github.com/gitpython-developers/gitdb
### https://github.com/gitpython-developers/GitPython
### http://gitpython.readthedocs.io/en/stable/tutorial.html#handling-remotes

    ssh_cmd = 'ssh -i id_deployment_key'
    with repo.git.custom_environment(GIT_SSH_COMMAND=ssh_cmd):
        repo.remotes.origin.fetch()

### http://cms-sw.github.io/tutorial-proxy.html
### http://stackoverflow.com/questions/783811/getting-git-to-work-with-a-proxy-server
### http://stackoverflow.com/questions/128035/how-do-i-pull-from-a-git-repository-through-an-http-proxy

    mv myrepo/.git myrepo.git ; cd myrepo.git ; git config --bool core.bare true

    git config --global http.proxy socks5://localhost:1080
    git config --global core.gitproxy "git-proxy"
    git config --global socks.proxy "localhost:1080"
    git-proxy --help
    view ~/.gitconfig

####

    git config --global core.autocrlf input
    git config --global core.autocrlf true # Windows


### http://stackoverflow.com/questions/610208/how-to-retrieve-a-single-file-from-specific-revision-in-git

    git show bde7984f89:mediatek/platform/mt6572/kernel/drivers/keypad/rckey.c > /tmp/rckey.c.bde7984f89
    git show object
    git show $REV:$FILE
    git show somebranch:from/the/root/myfile.txt
    git show HEAD^^^:test/test.py

### submodule
### http://stackoverflow.com/questions/1260748/how-do-i-remove-a-submodule

    git submodule update --init --recursive
    git submodule update --init
    git pull --recurse-submodules
    git submodule foreach "(git checkout master; git pull)"
    git submodule foreach git merge --ff-only

### github: Most starts

https://github.com/search?l=C%2B%2B&q=stars%3A%3E1&s=stars&type=Repositories

### http://stackoverflow.com/questions/822811/showing-which-files-have-changed-between-two-revisions

    git diff --name-status master..branchName
    git diff master..branch
    git diff bde7984f893966d..aa953d00e36ad
    git diff bde7984f893966d..HEAD
    git diff bde7984f893966d..HEAD packages/apps/Phone/src/com/android/phone/CallNotifier.java
    git log master..branch
    git shortlog master..branch

### http://stackoverflow.com/questions/3866165/fetching-all-remote-branches-into-a-bare-git-repository

    git remote update
    git fetch --all
    git fetch origin '*:*' 
    for x in `git remote show`; do git fetch $x; done

### http://stackoverflow.com/questions/1783405/how-to-checkout-a-remote-git-branch?noredirect=1&lq=1

    git fetch
    git checkout test
    (User masukomi points out below that git checkout test will NOT work in modern git if you have multiple remotes. In this case use 
        git checkout -b test remote-name/test)

### https://stackoverflow.com/questions/1778088/how-to-clone-a-single-branch-in-git
### git clone single branch

        git clone -b <branch name> [remote repository address]
    fetch所有remote branch并checkout特定branch。
    你用git branch 看不到是因为它只显示本地分支。 看全部
        git branch -a
    如果只想fetch特定分支
        git clone xxx -b remote-branch --single-branch
        git clone --depth 1 -b server2 --single-branch file:///$HOME/repo/xxx.git
        git clone <url> --branch <branch> --single-branch [<folder>]
        git clone git@192.168.2.105:mt6572 --branch k400 --single-branch k400

### http://stackoverflow.com/questions/2519933/git-clone-repo-across-local-file-system-in-windows

    git clone file:////<host>/<share>/<path>

### git tags
### http://stackoverflow.com/questions/1064499/how-to-get-a-list-of-all-git-tags
### http://stackoverflow.com/questions/3489173/how-to-clone-git-repository-with-specific-revision-changeset

    git tag -n ; git tag -l "v1.*"
    git show v1.0
    git fetch --tags
    git describe --tags $(git rev-list --tags --max-count=1)

    git tag v1.1
    git tag v1.1 1c0f75af2474e -m 'my build tag'
    git tag -d v1.1

    git checkout v1.1 -b feature-bugfix-v1.1

    git clone .../sozu/ -b v1.1 myb-v1.1

    git merge $(git describe --tags $(git rev-list --tags --max-count=1))

    git push origin --tags

    git tag -n
    git show-ref --tags -d

    git fetch origin refs/tags/3.4.2
    git reset --hard FETCH_HEAD

### http://stackoverflow.com/questions/7131703/how-to-know-which-branch-a-git-log-commit-belongs-to

How to know which branch a “git log” commit belongs to?

    git log --all --source --pretty=oneline --graph


### https://stackoverflow.com/questions/1230084/how-to-have-git-log-show-filenames-like-svn-log-v

    git log --name-only
    git log --name-status
    git log --stat

    git diff --name-only SHA1 SHA2



